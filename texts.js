/**
 * 国际化文本配置
 * 自动生成于 2025-09-28T15:02:35.008Z
 */
const TEXTS_CONFIG = {
    "content": {
        "__7___": "裂金7日 · 提现",
        "_root__": ":root { --bg: #0b0f14; --panel: #111823; --card: #0e141d; --brand: #56ccf2; --brand-2: #2f80ed; --text: #e6efff; --muted: #9fb3cd; --accent-border: rgba(111, 158, 255, 0.18); --error: #ff5d5d; --success: #00e3ae; /* 安全区域适配：用于 iPhone X 等带底部凹槽设备 */ --safe: env(safe-area-inset-bottom, 0px); } html, body { margin: 0; padding: 0; height: 100vh; background: var(--bg); color: var(--text); font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"PingFang SC\", \"Hiragino Sans GB\", \"Microsoft YaHei\", sans-serif; font-size: 16px; overflow: hidden; } .container { height: 100vh; display: flex; flex-direction: column; } .header { position: relative; flex: 0 0 80px; display: flex; align-items: center; justify-content: center; padding-top: 8px; } .header h1 { font-size: 18px; font-weight: 700; background: linear-gradient(45deg, #2193b0, #6dd5ed); -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent; filter: drop-shadow(0 0 12px rgba(109, 213, 237, 0.5)) drop-shadow(0 0 24px rgba(109, 213, 237, 0.3)); margin: 0; } /* 小logo样式 - 压缩尺寸 */ .logo-small { width: 50px; height: 50px; object-fit: contain; margin-right: 8px; filter: drop-shadow(0 0 8px rgba(109, 213, 237, 0.4)) drop-shadow(0 0 16px rgba(109, 213, 237, 0.2)); } .content { flex: 1; padding: 16px; padding-bottom: 100px; overflow-y: auto; overflow-x: hidden; display: flex; flex-direction: column; align-items: center; } .card { width: 100%; max-width: 480px; background: linear-gradient(180deg, rgba(15,21,32,0.85), rgba(15,21,32,0.9)); border-radius: 24px; padding: 24px; border: 1px solid var(--accent-border); box-shadow: 0 6px 20px rgba(0,0,0,0.35) inset, 0 12px 28px rgba(0,0,0,0.35); backdrop-filter: blur(16px); } .section { margin-bottom: 20px; } .section:last-child { margin-bottom: 0; } .section-title { font-size: 16px; font-weight: 600; margin-bottom: 8px; color: #a3b6ff; } .balance-info { background: rgba(0, 227, 174, 0.1); border: 1px solid rgba(0, 227, 174, 0.3); border-radius: 12px; padding: 12px; margin-bottom: 16px; text-align: center; } .balance-amount { font-size: 24px; font-weight: 700; color: var(--success); margin-bottom: 4px; } .balance-label { font-size: 12px; color: var(--muted); } .form-group { margin-bottom: 16px; } .form-label { display: block; font-size: 14px; font-weight: 600; margin-bottom: 6px; color: var(--text); } .form-input { width: 100%; padding: 12px 16px; background: rgba(255, 255, 255, 0.05); border: 1px solid rgba(255, 255, 255, 0.15); border-radius: 12px; color: var(--text); font-size: 16px; box-sizing: border-box; } .form-input:focus { outline: none; border-color: var(--brand); box-shadow: 0 0 0 2px rgba(86, 204, 242, 0.2); } .form-input.error { border-color: var(--error); box-shadow: 0 0 0 2px rgba(255, 93, 93, 0.2); } .error-message { color: var(--error); font-size: 12px; margin-top: 4px; } .fee-info { background: rgba(255, 255, 255, 0.03); border-radius: 8px; padding: 12px; font-size: 14px; } .fee-row { display: flex; justify-content: space-between; margin-bottom: 4px; } .fee-row:last-child { margin-bottom: 0; font-weight: 600; color: var(--brand); border-top: 1px solid rgba(255, 255, 255, 0.1); padding-top: 8px; margin-top: 8px; } .quick-amounts { display: flex; gap: 8px; margin-top: 8px; } .quick-amount { flex: 1; padding: 8px 12px; background: rgba(255, 255, 255, 0.05); border: 1px solid rgba(255, 255, 255, 0.15); border-radius: 8px; color: var(--text); font-size: 12px; cursor: pointer; text-align: center; transition: all 0.2s ease; } .quick-amount:hover { background: rgba(86, 204, 242, 0.1); border-color: var(--brand); } .quiz-btn { display: inline-block; margin-left: 8px; padding: 4px 8px; background: linear-gradient(135deg, #ff6b35, #f7931e); color: white; border: none; border-radius: 6px; font-size: 12px; font-weight: 600; cursor: pointer; text-decoration: none; transition: all 0.2s ease; box-shadow: 0 2px 8px rgba(255, 107, 53, 0.3); } .quiz-btn:hover { transform: translateY(-1px); box-shadow: 0 4px 12px rgba(255, 107, 53, 0.4); } .bottom { position: fixed; bottom: 0; left: 0; right: 0; padding: 14px 16px calc(24px + var(--safe)); display: flex; background: rgba(255,255,255,0.04); backdrop-filter: blur(10px); border-top: 1px solid rgba(255,255,255,0.06); margin: 0 12px 12px; border-radius: 20px 20px 0 0; z-index: 100; } /* 自定义对话框样式 */ .modal-overlay { position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.7); display: flex; align-items: center; justify-content: center; z-index: 1000; padding: 20px; backdrop-filter: blur(8px); } .modal-content { background: linear-gradient(180deg, rgba(15,21,32,0.95), rgba(15,21,32,0.98)); border-radius: 16px; width: 100%; max-width: 400px; max-height: 80vh; overflow-y: auto; box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5); border: 1px solid var(--accent-border); backdrop-filter: blur(16px); } .modal-header { padding: 20px 20px 10px; border-bottom: 1px solid rgba(255, 255, 255, 0.1); } .modal-header h3 { margin: 0; font-size: 18px; font-weight: 600; color: var(--text); text-align: center; } .modal-body { padding: 20px; } .confirm-text { margin: 0 0 15px; font-size: 16px; color: var(--text); text-align: center; } .address-display { background: rgba(255, 255, 255, 0.05); border: 2px solid var(--accent-border); border-radius: 12px; padding: 15px; margin: 15px 0; min-height: 60px; display: flex; align-items: center; justify-content: center; } .address-text { font-family: 'Courier New', monospace; font-size: 14px; color: var(--text); word-break: break-all; line-height: 1.4; text-align: center; font-weight: 500; } .warning-text { margin: 15px 0 0; font-size: 14px; color: var(--error); text-align: center; font-weight: 500; } .hint-text { margin: 10px 0 0; font-size: 14px; color: var(--muted); text-align: center; line-height: 1.4; } .modal-footer { padding: 10px 20px 20px; display: flex; gap: 10px; justify-content: center; } .modal-btn { flex: 1; padding: 12px 20px; border: none; border-radius: 12px; font-size: 16px; font-weight: 500; cursor: pointer; transition: all 0.3s ease; } .cancel-btn { background: rgba(255, 255, 255, 0.08); color: var(--text); border: 1px solid rgba(255, 255, 255, 0.15); } .cancel-btn:hover { background: rgba(255, 255, 255, 0.12); transform: translateY(-1px); } .confirm-btn { background: linear-gradient(135deg, var(--brand), var(--brand-2)); color: white; box-shadow: 0 4px 12px rgba(47, 128, 237, 0.3); } .confirm-btn:hover { transform: translateY(-1px); box-shadow: 0 6px 16px rgba(47, 128, 237, 0.4); } /* 移动端优化 */ @media (max-width: 480px) { .modal-overlay { padding: 10px; } .modal-content { max-height: 90vh; } .address-text { font-size: 12px; } .modal-btn { padding: 14px 16px; font-size: 15px; } } .bottom button { flex: 1; margin: 0 6px; border: none; border-radius: 16px; padding: 14px 0; font-size: 14px; font-weight: 800; color: var(--text); cursor: pointer; transition: transform 0.08s ease, filter 0.2s ease, box-shadow 0.2s ease; background-image: linear-gradient(180deg, var(--brand), var(--brand-2)); box-shadow: 0 8px 24px rgba(47,128,237,0.45), inset 0 1px 0 rgba(255,255,255,0.25); /* 避免移动端按钮文字换行 */ white-space: nowrap; } .bottom button:hover { transform: translateY(-3px); filter: brightness(1.2); } .bottom button:active { transform: translateY(0); filter: brightness(0.95); } .bottom button:disabled { opacity: 0.5; cursor: not-allowed; transform: none; filter: none; } .bottom .back-btn { position: static; background: rgba(255,255,255,0.08); border: 1px solid rgba(255,255,255,0.15); border-radius: 12px; padding: 12px 24px; color: var(--text); font-size: 16px; cursor: pointer; flex: 1; margin-right: 12px; } .bottom .back-btn:hover { background: rgba(255,255,255,0.12); transform: translateY(-2px); }",
        "____": "`; } else { // 手续费是1%，不显示答题按钮 feeRateLabel.innerHTML = `比例手续费 (${feeRatePercent}%) - ${progressText}`; } } function setQuickAmount(amount) { const amountInput = document.getElementById('withdrawAmount'); if (amount === 'all') { // 计算最大可提现金额（扣除手续费后） const fixedFee = 2; // 使用更精确的计算方式，避免浮点数精度问题 const maxAmount = Math.floor(((currentBalance - fixedFee) / (1 + feeRate)) * 100) / 100; amountInput.value = Math.max(0, maxAmount).toFixed(2); } else { amountInput.value = amount; } updateFeeCalculation(); } function updateFeeCalculation() { const amountInput = document.getElementById('withdrawAmount'); const amount = parseFloat(amountInput.value) || 0; const fixedFee = 2; const percentFee = amount * feeRate; const totalFee = fixedFee + percentFee; const totalDeduct = amount + totalFee; document.getElementById('feeAmount').innerText = amount.toFixed(2) + ' USDT'; document.getElementById('feePercent').innerText = percentFee.toFixed(2) + ' USDT'; document.getElementById('totalDeduct').innerText = totalDeduct.toFixed(2) + ' USDT'; validateForm(); } function validateForm() { const amountInput = document.getElementById('withdrawAmount'); const addressInput = document.getElementById('walletAddress'); const confirmBtn = document.getElementById('confirmBtn'); const amountError = document.getElementById('amountError'); const addressError = document.getElementById('addressError'); let isValid = true; // 验证金额 const amount = parseFloat(amountInput.value) || 0; const fixedFee = 2; const percentFee = amount * feeRate; const totalDeduct = amount + fixedFee + percentFee; amountInput.classList.remove('error'); amountError.style.display = 'none'; if (amount",
        "____100": "请转入 100 USDT (TRC20)",
        "________________": "注册即表示同意用户协议和隐私政策",
        "______": "设置默认地址",
        "__": "明细",
        "function_genaddr__": "function genAddr() { let addr = localStorage.getItem('activationAddress'); if (!addr) { // 生成一个简单的模拟地址 addr = 'T' + Math.random().toString(36).substr(2, 33).toUpperCase(); localStorage.setItem('activationAddress', addr); } document.getElementById('addr').textContent = addr; } function copyAddr() { const addr = document.getElementById('addr').textContent; navigator.clipboard.writeText(addr).then(() => { alert('已复制地址'); }).catch(() => { alert('复制失败，请手动复制'); }); } function finish() { // 设置状态2并跳转回主页面 localStorage.setItem('userStatus', '2'); alert('我们将在链上确认后激活您的账号，现在返回首页'); location.href = 'ui_design.html'; } window.addEventListener('DOMContentLoaded', genAddr);",
        "________": "重新发送验证邮件",
        "____________________________": "请输入您注册时使用的邮箱地址，我们将向您发送密码重置链接。",
        "_____________": "恭喜您！您的邮箱已成功验证，现在可以正常使用所有功能了。",
        "_______": "未找到交易记录。",
        "______1_____": "重置链接将在1小时后过期",
        "__________": "点击重新发送验证邮件",
        "____________________": "验证链接无效或已过期，请重新发送验证邮件。",
        "_15_______5___": "每15分钟最多可申请5次重置",
        "_____": "固定手续费",
        "___________________": "我们是团队结构游戏，不支持玩家独立注册",
        "_________________": "没有收到邮件？请检查垃圾邮件文件夹，或者等待几分钟后重试。",
        "_______7_": "查找来自 裂金7日 的邮件",
        "___________": "请仔细核对您的收款地址：",
        "____________": "点击下方按钮测试设置功能",
        "_________": "🔄 重新加载页面",
        "__7__h5": "裂金7日 H5 页面",
        "html__body": "html, body { margin: 0; padding: 0; height: 100vh; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"PingFang SC\", \"Hiragino Sans GB\", \"Microsoft YaHei\", sans-serif; background: var(--bg-primary); color: var(--text-primary); font-size: 16px; overflow: hidden; } /* 应用容器 100vh 三段式布局 */ .app { height: 100vh; display: flex; flex-direction: column; position: relative; z-index: 1; } /* 顶部区域 - 固定高度 */ .header { flex: 0 0 65px; display: flex; flex-direction: column; align-items: center; justify-content: center; position: relative; padding-top: 0px; background: var(--bg-secondary); border-bottom: 1px solid var(--border-color); z-index: 100; } .header-main { display: flex; align-items: center; gap: 15px; margin: 0; padding: 0 20px; position: relative; } .status-info { display: flex; align-items: center; gap: 6px; } .logo { font-size: 32px; font-weight: 700; letter-spacing: 1px; background: var(--btn-gradient); -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent; filter: var(--logo-filter); } /* 新的 logo 图片样式 - 适中尺寸 */ .logo-img { width: 65px; height: 65px; object-fit: contain; filter: var(--logo-filter); } .state-label { font-size: 13px; font-weight: 600; color: var(--text-secondary); } /* 消息图标样式 */ .message-icon { position: fixed; left: 10px; top: 10px; width: 48px; height: 48px; cursor: pointer; z-index: 101; transition: all 0.3s ease; display: flex; align-items: center; justify-content: center; user-select: none; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; touch-action: none; } /* 拖拽状态样式 */ .message-icon.dragging { transition: none; transform: scale(1.1); opacity: 0.8; cursor: grabbing; } .message-icon:hover:not(.dragging) { transform: translateY(-50%) scale(1.1); } .message-icon img { width: 36px; height: 36px; transition: all 0.3s ease; } .message-icon svg { width: 36px; height: 36px; transition: all 0.3s ease; } .message-icon:hover:not(.dragging) img, .message-icon:hover:not(.dragging) svg { filter: brightness(1.1); } /* 未读消息提示点 */ .unread-dot { position: absolute; top: -3px; right: -3px; width: 14px; height: 14px; background: #ff4444; border-radius: 50%; border: 2px solid var(--bg-secondary); opacity: 0; transform: scale(0); transition: all 0.3s ease; box-shadow: 0 0 8px rgba(255, 68, 68, 0.6); } .unread-dot.show { opacity: 1; transform: scale(1); animation: pulse 1.5s ease-in-out infinite; } /* 脉冲动画 */ @keyframes pulse { 0% { transform: scale(1); box-shadow: 0 0 8px rgba(255, 68, 68, 0.6); } 50% { transform: scale(1.2); box-shadow: 0 0 16px rgba(255, 68, 68, 0.8); } 100% { transform: scale(1); box-shadow: 0 0 8px rgba(255, 68, 68, 0.6); } } /* 抖动动画 */ @keyframes shake { 0%, 100% { transform: translateY(0); } 10%, 30%, 50%, 70%, 90% { transform: translateY(-4px); } 20%, 40%, 60%, 80% { transform: translateY(4px); } } .message-icon.shake { animation: shake 0.3s ease-in-out; } /* 持续轻微抖动效果（未读消息时） */ @keyframes gentleShake { 0%, 100% { transform: translateY(0); } 25% { transform: translateY(-3px); } 75% { transform: translateY(3px); } } .message-icon.has-unread { animation: gentleShake 0.8s ease-in-out infinite; } .state-label { text-shadow: 0 0 6px var(--accent-color); } .subtitle { font-size: 11px; color: var(--text-secondary); opacity: 0.8; } /* 开发测试按钮，可隐藏于生产环境 */ .test-btn { position: fixed; top: 70px; right: 10px; background: var(--bg-secondary); border: 1px solid var(--border-color); border-radius: 6px; color: var(--accent-color); font-size: 12px; padding: 3px 6px; z-index: 998; } .reset-btn { position: fixed; top: 120px; right: 10px; background: var(--bg-secondary); border: 1px solid var(--border-color); border-radius: 6px; color: #ff6464; font-size: 12px; padding: 3px 6px; cursor: pointer; transition: all 0.3s ease; z-index: 998; } .reset-btn:hover { background: linear-gradient(135deg, #ff6464, #ff4444); color: var(--text-primary); transform: translateY(-1px); } .settings-btn { background: rgba(255,255,255,0.2) !important; color: #ffffff !important; border: 1px solid rgba(255,255,255,0.4) !important; border-radius: 8px !important; padding: 6px 10px !important; font-size: 14px !important; cursor: pointer !important; position: fixed !important; top: 10px !important; right: 10px !important; z-index: 999 !important; opacity: 0.9 !important; transition: all 0.3s ease !important; box-shadow: 0 2px 8px rgba(0,0,0,0.3) !important; } .settings-btn:hover { opacity: 1 !important; background: rgba(255,255,255,0.3) !important; border-color: rgba(255,255,255,0.6) !important; transform: scale(1.05) !important; box-shadow: 0 4px 12px rgba(0,0,0,0.4) !important; } .theme-demo-btn { position: absolute; top: 8px; left: 12px; background: var(--btn-gradient); border: none; border-radius: 6px; color: var(--text-primary); font-size: 12px; padding: 3px 6px; cursor: pointer; box-shadow: var(--btn-shadow); transition: all 0.3s ease; } .theme-demo-btn:hover { transform: translateY(-1px); filter: brightness(1.1); } .test-btn { cursor: pointer; transition: all 0.3s ease; } .test-btn:hover { background: var(--btn-gradient); color: var(--text-primary); } /* 中部内容卡片区域 - 可滚动 */ .content { flex: 1; overflow-y: auto; overflow-x: hidden; /* 禁止水平滚动 */ padding: 16px; padding-bottom: 100px; /* 为底部固定按钮留出空间 */ display: flex; flex-direction: column; align-items: center; } .card { width: 100%; max-width: 480px; background: var(--bg-card); border-radius: 24px; padding: 24px; border: 1px solid var(--border-color); box-shadow: var(--btn-shadow); backdrop-filter: blur(16px); display: flex; flex-direction: column; justify-content: center; } .section { margin-bottom: 16px; position: relative; } .section:last-child { margin-bottom: 0; } /* 光效分割线 */ .section:not(:last-child)::after { content: \"\"; position: absolute; bottom: -8px; left: 0; right: 0; height: 1px; background: linear-gradient(90deg, transparent, var(--accent-color), transparent); opacity: 0.4; } .section-title { font-size: 16px; font-weight: 600; margin-bottom: 6px; color: var(--text-secondary); } .section-content { font-size: 14px; line-height: 1.4; color: var(--text-primary); opacity: 0.9; } /* 任务列表样式 */ .task-list { list-style: none; padding: 0; margin: 0; } .task-item { display: flex; align-items: center; justify-content: space-between; padding: 8px 0; } .task-item:not(:last-child) { border-bottom: 1px solid rgba(255, 255, 255, 0.05); } .task-title { flex: 1; font-size: 14px; color: #e0e5fb; } .task-status { font-size: 12px; padding: 2px 6px; border-radius: 12px; background: linear-gradient(45deg, #00eaff, #0088ff); box-shadow: 0 0 6px rgba(0, 136, 255, 0.6); color: #031e2e; } .task-status.done { background: linear-gradient(45deg, #9be15d, #00e3ae); box-shadow: 0 0 6px rgba(0, 227, 174, 0.6); } /* 再次激活突出样式 */ .reactivate-highlight { background: linear-gradient(135deg, rgba(255, 107, 107, 0.15), rgba(255, 193, 7, 0.15)); border: 2px solid rgba(255, 107, 107, 0.3); border-radius: 12px; padding: 20px; margin-bottom: 16px; position: relative; overflow: hidden; } .reactivate-highlight::before { content: ''; position: absolute; top: 0; left: -100%; width: 100%; height: 100%; background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent); animation: shimmer 2s infinite; } @keyframes shimmer { 0% { left: -100%; } 100% { left: 100%; } } .reactivate-highlight .section-title { color: #ff6b6b; font-size: 18px; font-weight: 700; text-shadow: 0 0 10px rgba(255, 107, 107, 0.5); } .reactivate-btn { background: linear-gradient(45deg, #ff6b6b, #ffc107); border: none; border-radius: 25px; padding: 12px 24px; font-size: 16px; font-weight: 600; color: white; cursor: pointer; box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4); transition: all 0.3s ease; width: 100%; text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); } .reactivate-btn:hover { transform: translateY(-2px); box-shadow: 0 6px 20px rgba(255, 107, 107, 0.6); } .reactivate-btn:active { transform: translateY(0); } /* 底部按钮区域 - 固定在屏幕底部 */ .bottom { position: fixed; bottom: 0; left: 0; right: 0; padding: 12px 16px calc(20px + env(safe-area-inset-bottom, 0px)); display: flex; flex-wrap: wrap; gap: 10px; /* 半透明背景与模糊，仿原生底部栏 */ background: rgba(255, 255, 255, 0.06); backdrop-filter: blur(16px); border-top: 1px solid rgba(255, 255, 255, 0.12); margin: 0 12px 12px; border-radius: 24px 24px 0 0; z-index: 100; /* 添加微妙的内阴影增强层次感 */ box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1), 0 -4px 20px rgba(0, 0, 0, 0.1); } /* 基础按钮样式 - 移动端优化，符合黄金比例 */ .bottom button { flex: 1; min-width: 0; min-height: 36px; /* 黄金比例优化的触摸区域 */ border: none; border-radius: 18px; padding: 10px 8px; font-size: 13px; font-weight: 700; color: var(--text); cursor: pointer; transition: all 0.15s cubic-bezier(0.4, 0, 0.2, 1); /* 避免移动端按钮文字换行 */ white-space: nowrap; overflow: hidden; text-overflow: ellipsis; position: relative; background-image: linear-gradient(135deg, var(--brand), var(--brand-2)); box-shadow: 0 4px 16px rgba(47, 128, 237, 0.25), inset 0 1px 0 rgba(255, 255, 255, 0.35), 0 1px 6px rgba(0, 0, 0, 0.1); text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25); /* 添加微妙的边框增强立体感 */ border: 1px solid rgba(255, 255, 255, 0.15); } /* 主要按钮 - 更突出的视觉效果和游戏感 */ .bottom button.primary { font-size: 15px; font-weight: 800; padding: 17px 14px; min-height: 52px; background-image: linear-gradient(135deg, #4A90E2, #357ABD, #2E6DA4); box-shadow: 0 8px 32px rgba(74, 144, 226, 0.4), inset 0 1px 0 rgba(255, 255, 255, 0.4), 0 3px 14px rgba(0, 0, 0, 0.18), 0 0 0 1px rgba(74, 144, 226, 0.2); border: 1px solid rgba(255, 255, 255, 0.25); /* 添加微妙的脉冲效果 */ animation: primaryPulse 3s ease-in-out infinite; } @keyframes primaryPulse { 0%, 100% { box-shadow: 0 8px 32px rgba(74, 144, 226, 0.4), inset 0 1px 0 rgba(255, 255, 255, 0.4), 0 3px 14px rgba(0, 0, 0, 0.18), 0 0 0 1px rgba(74, 144, 226, 0.2); } 50% { box-shadow: 0 10px 36px rgba(74, 144, 226, 0.5), inset 0 1px 0 rgba(255, 255, 255, 0.45), 0 4px 16px rgba(0, 0, 0, 0.2), 0 0 0 1px rgba(74, 144, 226, 0.3); } } /* 金融相关按钮 - 更专业稳重的设计 */ .bottom button.financial { background-image: linear-gradient(135deg, #D4AF37, #B8860B, #996515); box-shadow: 0 8px 28px rgba(212, 175, 55, 0.35), inset 0 1px 0 rgba(255, 255, 255, 0.45), 0 3px 12px rgba(0, 0, 0, 0.15), 0 0 0 1px rgba(212, 175, 55, 0.3); font-weight: 800; position: relative; border: 1px solid rgba(255, 255, 255, 0.3); /* 移除过度闪光，保持专业感 */ } /* 金融按钮安全指示器 - 更精致 */ .bottom button.financial::before { content: \"🔒\"; position: absolute; top: 3px; right: 6px; font-size: 11px; opacity: 0.9; filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.3)); } /* 游戏化按钮 - 更有活力和任务感 */ .bottom button.gaming { background-image: linear-gradient(135deg, #9C27B0, #673AB7, #512DA8); box-shadow: 0 8px 32px rgba(156, 39, 176, 0.4), inset 0 1px 0 rgba(255, 255, 255, 0.35), 0 3px 14px rgba(0, 0, 0, 0.18), 0 0 0 1px rgba(156, 39, 176, 0.25); position: relative; overflow: visible; border: 1px solid rgba(255, 255, 255, 0.2); /* 增强游戏感的脉冲动画 */ animation: gamingPulse 2.5s ease-in-out infinite; } @keyframes gamingPulse { 0%, 100% { box-shadow: 0 8px 32px rgba(156, 39, 176, 0.4), inset 0 1px 0 rgba(255, 255, 255, 0.35), 0 3px 14px rgba(0, 0, 0, 0.18), 0 0 0 1px rgba(156, 39, 176, 0.25); } 50% { box-shadow: 0 10px 36px rgba(156, 39, 176, 0.55), inset 0 1px 0 rgba(255, 255, 255, 0.4), 0 4px 16px rgba(0, 0, 0, 0.2), 0 0 0 1px rgba(156, 39, 176, 0.4); } } /* 游戏化按钮能量边框效果 */ .bottom button.gaming::after { content: \"\"; position: absolute; top: -1px; left: -1px; right: -1px; bottom: -1px; background: linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.15) 50%, transparent 70%); border-radius: 21px; animation: energyFlow 4s linear infinite; z-index: -1; opacity: 0.8; } @keyframes energyFlow { 0% { transform: translateX(-100%) rotate(0deg); } 100% { transform: translateX(100%) rotate(360deg); } } /* 次要按钮 - 更柔和但保持质感 */ .bottom button.secondary { background-image: linear-gradient(135deg, #78909C, #546E7A, #455A64); box-shadow: 0 4px 20px rgba(120, 144, 156, 0.25), inset 0 1px 0 rgba(255, 255, 255, 0.25), 0 2px 8px rgba(0, 0, 0, 0.1); font-size: 13px; border: 1px solid rgba(255, 255, 255, 0.1); } /* 当按钮超过6个时，调整布局 - 移动端优化 */ .bottom.many-buttons { justify-content: center; gap: 10px; padding: 16px 18px calc(26px + env(safe-area-inset-bottom, 0px)); } .bottom.many-buttons button { flex: 0 1 calc(33.333% - 7px); margin: 2px; padding: 14px 10px; font-size: 12px; border-radius: 16px; min-height: 44px; } /* 按钮颜色渐变 - 保持兼容性 */ .bottom button.red, .bottom button.orange, .bottom button.green, .bottom button.purple, .bottom button.blue { background: var(--btn-gradient); box-shadow: var(--btn-shadow), var(--btn-glow); } .bottom button:disabled { opacity: 0.4; cursor: default; filter: grayscale(0.8) brightness(0.7); transform: none !important; animation: none !important; } /* 悬停效果 - 增强反馈和浮起感 */ .bottom button:not(:disabled):hover { transform: translateY(-6px) scale(1.03); filter: brightness(1.2) saturate(1.15); transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1); } /* 主要按钮悬停效果 */ .bottom button.primary:not(:disabled):hover { box-shadow: 0 14px 40px rgba(74, 144, 226, 0.6), inset 0 1px 0 rgba(255, 255, 255, 0.5), 0 5px 20px rgba(0, 0, 0, 0.25), 0 0 0 1px rgba(74, 144, 226, 0.4); animation: none; /* 悬停时暂停脉冲 */ } /* 金融按钮悬停效果 */ .bottom button.financial:not(:disabled):hover { box-shadow: 0 12px 36px rgba(212, 175, 55, 0.5), inset 0 1px 0 rgba(255, 255, 255, 0.55), 0 4px 18px rgba(0, 0, 0, 0.25), 0 0 0 1px rgba(212, 175, 55, 0.4); } /* 游戏化按钮悬停效果 */ .bottom button.gaming:not(:disabled):hover { box-shadow: 0 14px 40px rgba(156, 39, 176, 0.6), inset 0 1px 0 rgba(255, 255, 255, 0.45), 0 5px 20px rgba(0, 0, 0, 0.25), 0 0 0 1px rgba(156, 39, 176, 0.5); animation: none; /* 悬停时暂停脉冲 */ } /* 次要按钮悬停效果 */ .bottom button.secondary:not(:disabled):hover { box-shadow: 0 8px 28px rgba(120, 144, 156, 0.4), inset 0 1px 0 rgba(255, 255, 255, 0.35), 0 3px 14px rgba(0, 0, 0, 0.15); } /* 点击效果 - 更明显的反馈 */ .bottom button:not(:disabled):active { transform: translateY(-2px) scale(0.97); filter: brightness(0.85) saturate(1.1); transition: all 0.08s ease; } /* 移动端触摸优化 */ @media (hover: none) and (pointer: coarse) { .bottom button:not(:disabled):active { transform: scale(0.95); filter: brightness(0.9); transition: all 0.1s ease; } } /* 倒计时优化样式 */ @keyframes countdownPulse { 0%, 100% { box-shadow: 0 8px 32px rgba(47, 128, 237, 0.2), inset 0 1px 0 rgba(255, 255, 255, 0.1); } 50% { box-shadow: 0 12px 40px rgba(47, 128, 237, 0.3), inset 0 1px 0 rgba(255, 255, 255, 0.15); } } @keyframes rotate { from { transform: rotate(0deg); } to { transform: rotate(360deg); } } @keyframes blink { 0%, 100% { opacity: 1; } 50% { opacity: 0.3; } } /* 紧急状态动画 */ @keyframes urgentPulse { 0%, 100% { box-shadow: 0 8px 32px rgba(255, 69, 58, 0.3), inset 0 1px 0 rgba(255, 255, 255, 0.1); border-color: #ff453a; } 50% { box-shadow: 0 12px 40px rgba(255, 69, 58, 0.5), inset 0 1px 0 rgba(255, 255, 255, 0.15); border-color: #ff6961; } } @keyframes urgentBlink { 0%, 100% { opacity: 1; } 50% { opacity: 0.1; } } /* 进度条高级科技流光动画 */ @keyframes slideRight { 0% { transform: translateX(-100%); } 100% { transform: translateX(400%); } } /* 倒计时响应式设计 */ @media (max-width: 480px) { .countdown-container { padding: 16px !important; margin: 0 -4px 16px -4px !important; } .countdown-container .time-display { font-size: 28px !important; letter-spacing: 1px !important; } .countdown-container .progress-ring { width: 70px !important; height: 70px !important; } .countdown-container .progress-ring svg { width: 70px !important; height: 70px !important; } .countdown-container .progress-ring circle { r: 30 !important; stroke-dasharray: 188 !important; } /* 移动端时间显示区域调整 */ .countdown-container .time-area { gap: 12px !important; } /* 移动端状态提示调整 */ .countdown-container #countdownStatus { font-size: 11px !important; padding: 6px 10px !important; } /* 移动端战绩卡调整 */ .grid-stats { grid-template-columns: 1fr !important; gap: 8px !important; font-size: 11px !important; } .stat-item { padding: 8px !important; font-size: 11px !important; } .stat-value { font-size: 13px !important; } } @media (max-width: 360px) { .countdown-container { padding: 12px !important; } .countdown-container .time-display { font-size: 24px !important; } .countdown-container .progress-ring { width: 60px !important; height: 60px !important; } .countdown-container .progress-ring svg { width: 60px !important; height: 60px !important; } .countdown-container .progress-ring circle { r: 25 !important; stroke-dasharray: 157 !important; } .countdown-container .time-labels { gap: 8px !important; font-size: 10px !important; } } /* 邀请按钮突出显示，增加光晕 */ .bottom button[data-key=\"invite\"], .bottom button[data-key=\"inviteNew\"] { box-shadow: 0 12px 32px rgba(86, 204, 242, 0.55), inset 0 1px 0 rgba(255, 255, 255, 0.3); } /* 主要突出按钮样式 - 激活账号专用 */ .bottom button.primary-highlight { font-size: 18px !important; font-weight: bold !important; padding: 16px 24px !important; background: linear-gradient(135deg, #00ff88, #00cc66, #009944) !important; box-shadow: 0 8px 24px rgba(0, 255, 136, 0.4), 0 4px 12px rgba(0, 204, 102, 0.3), inset 0 1px 0 rgba(255, 255, 255, 0.4) !important; border: 2px solid rgba(0, 255, 136, 0.6) !important; animation: pulse-glow 2s ease-in-out infinite !important; } .bottom button.primary-highlight:hover { transform: translateY(-4px) !important; box-shadow: 0 12px 32px rgba(0, 255, 136, 0.5), 0 6px 16px rgba(0, 204, 102, 0.4), inset 0 1px 0 rgba(255, 255, 255, 0.5) !important; } @keyframes pulse-glow { 0%, 100% { box-shadow: 0 8px 24px rgba(0, 255, 136, 0.4), 0 4px 12px rgba(0, 204, 102, 0.3), inset 0 1px 0 rgba(255, 255, 255, 0.4); } 50% { box-shadow: 0 12px 32px rgba(0, 255, 136, 0.6), 0 6px 16px rgba(0, 204, 102, 0.5), inset 0 1px 0 rgba(255, 255, 255, 0.5); } } /* 高级弹窗样式 */ .dialog { position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.7); display: flex; align-items: center; justify-content: center; z-index: 1000; opacity: 0; visibility: hidden; transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); backdrop-filter: blur(8px); } .dialog.show { opacity: 1; visibility: visible; } .dialog .dialog-box { background: var(--bg-card); border-radius: 20px; padding: 28px 32px; max-width: 85%; min-width: 280px; color: var(--text-primary); box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3), 0 8px 24px rgba(0, 0, 0, 0.2); border: 1px solid var(--border-color); transform: scale(0.7) translateY(20px); transition: all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1); position: relative; overflow: hidden; } .dialog.show .dialog-box { transform: scale(1) translateY(0); } .dialog .dialog-box::before { content: ''; position: absolute; top: 0; left: -100%; width: 100%; height: 100%; background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent); transition: left 0.6s; } .dialog.show .dialog-box::before { left: 100%; } .dialog .dialog-box h3 { margin: 0 0 16px 0; font-size: 20px; font-weight: 600; text-align: center; } /* 模态框基础样式 */ .modal { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.6); display: flex; align-items: center; justify-content: center; z-index: 1000; } .modal-content { background: var(--bg-card); border-radius: 16px; padding: 24px; position: relative; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); border: 1px solid var(--border-color); max-height: 90vh; overflow-y: auto; } .modal-close { position: absolute; top: 12px; right: 12px; background: none; border: none; font-size: 20px; color: var(--text-secondary); cursor: pointer; padding: 4px; border-radius: 50%; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center; transition: all 0.2s ease; } .modal-close:hover { background: rgba(255, 255, 255, 0.1); color: var(--text-primary); } /* 设置面板样式 */ .settings-panel { padding: 0; } /* 设置标题 */ .settings-header { text-align: center; margin-bottom: 24px; padding-bottom: 20px; border-bottom: 2px solid var(--border-color); } .settings-header h2 { margin: 0; font-size: 20px; color: var(--text-primary); font-weight: 700; } /* 个人资料卡片 */ .profile-card { background: linear-gradient(135deg, var(--brand), var(--brand-2)); border-radius: 16px; padding: 20px; margin-bottom: 24px; display: flex; align-items: center; gap: 16px; box-shadow: 0 8px 24px rgba(47, 128, 237, 0.2); } .profile-avatar { flex-shrink: 0; } .avatar-circle { width: 50px; height: 50px; border-radius: 50%; background: rgba(255, 255, 255, 0.2); display: flex; align-items: center; justify-content: center; font-size: 24px; backdrop-filter: blur(10px); } .profile-info { flex: 1; color: white; } .profile-name { font-size: 16px; font-weight: 600; margin-bottom: 4px; } .profile-code { font-size: 13px; opacity: 0.9; } .profile-level { flex-shrink: 0; } .level-badge { background: rgba(255, 255, 255, 0.2); color: white; padding: 6px 12px; border-radius: 20px; font-size: 12px; font-weight: 600; backdrop-filter: blur(10px); } /* 设置区域 */ .settings-section { margin-bottom: 24px; } .settings-section h3 { margin: 0 0 12px 0; font-size: 16px; color: var(--text-primary); font-weight: 600; } /* 设置卡片 */ .settings-card { background: var(--bg-card); border-radius: 12px; border: 1px solid var(--border-color); overflow: hidden; } /* 设置项 */ .setting-item { display: flex; align-items: center; padding: 16px 20px; border-bottom: 1px solid var(--border-color); transition: background-color 0.2s ease; } .setting-item:last-child { border-bottom: none; } .setting-item.clickable { cursor: pointer; } .setting-item.clickable:hover { background: rgba(47, 128, 237, 0.05); } .setting-info { flex: 1; } .setting-title { display: block; font-size: 15px; font-weight: 500; color: var(--text-primary); margin-bottom: 2px; } .setting-desc { display: block; font-size: 13px; color: var(--text-secondary); } .arrow { font-size: 18px; color: var(--text-secondary); font-weight: bold; } /* 主题按钮 */ .theme-btn { background: var(--brand); color: white; border: none; border-radius: 8px; padding: 8px 16px; font-size: 14px; cursor: pointer; display: flex; align-items: center; gap: 8px; transition: all 0.2s ease; } .theme-btn:hover { transform: translateY(-1px); box-shadow: 0 4px 12px rgba(47, 128, 237, 0.3); } .theme-preview { width: 16px; height: 16px; border-radius: 4px; background: linear-gradient(45deg, #ff6b6b, #4ecdc4, #45b7d1); } /* 现代化选择框 */ .modern-select { background: var(--bg-secondary); color: var(--text-primary); border: 1px solid var(--border-color); border-radius: 8px; padding: 8px 12px; font-size: 14px; cursor: pointer; min-width: 140px; transition: all 0.2s ease; } .modern-select:focus { outline: none; border-color: var(--brand); box-shadow: 0 0 0 3px rgba(47, 128, 237, 0.1); } /* Toggle开关 */ .toggle-switch { position: relative; display: inline-block; width: 50px; height: 28px; } .toggle-switch input { opacity: 0; width: 0; height: 0; } .toggle-slider { position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: #ccc; transition: 0.3s; border-radius: 28px; } .toggle-slider:before { position: absolute; content: \"\"; height: 20px; width: 20px; left: 4px; bottom: 4px; background-color: white; transition: 0.3s; border-radius: 50%; box-shadow: 0 2px 4px rgba(0,0,0,0.2); } input:checked + .toggle-slider { background-color: var(--brand); } input:checked + .toggle-slider:before { transform: translateX(22px); } /* 操作按钮 */ .action-btn { background: var(--bg-secondary); color: var(--text-primary); border: 1px solid var(--border-color); border-radius: 6px; padding: 6px 12px; font-size: 13px; cursor: pointer; transition: all 0.2s ease; } .action-btn:hover { background: var(--brand); color: white; border-color: var(--brand); } /* 危险操作区域 */ .danger-zone { margin: 32px 0 24px 0; } .danger-zone h3 { margin: 0 0 12px 0; font-size: 16px; color: #ff6b6b; font-weight: 600; } .danger-card { background: rgba(255, 107, 107, 0.05); border: 1px solid rgba(255, 107, 107, 0.2); border-radius: 12px; padding: 20px; } .danger-warning { display: flex; align-items: flex-start; gap: 12px; margin-bottom: 16px; padding: 12px; background: rgba(255, 107, 107, 0.1); border-radius: 8px; } .warning-icon { font-size: 20px; flex-shrink: 0; } .warning-text { font-size: 13px; color: var(--text-secondary); line-height: 1.4; } .danger-btn { background: linear-gradient(135deg, #ff6b6b, #ee5a52); color: white; border: none; border-radius: 8px; padding: 12px 24px; font-size: 15px; font-weight: 600; cursor: pointer; width: 100%; transition: all 0.2s ease; box-shadow: 0 4px 12px rgba(255, 107, 107, 0.3); } .danger-btn:hover { transform: translateY(-2px); box-shadow: 0 6px 16px rgba(255, 107, 107, 0.4); } .danger-btn:active { transform: translateY(0); } /* 设置页脚 */ .settings-footer { margin-top: 32px; padding-top: 20px; border-top: 2px solid var(--border-color); text-align: center; } .back-btn { background: linear-gradient(135deg, #4a90e2, #357abd); color: white; border: none; border-radius: 10px; padding: 14px 32px; font-size: 16px; font-weight: 600; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 4px 12px rgba(74, 144, 226, 0.3); min-width: 200px; } .back-btn:hover { transform: translateY(-2px); box-shadow: 0 6px 16px rgba(74, 144, 226, 0.4); } .back-btn:active { transform: translateY(0); } /* 兼容旧样式 */ .settings-select:focus { outline: none; border-color: var(--brand); box-shadow: 0 0 0 2px rgba(47, 128, 237, 0.2); } .dialog .dialog-box p { margin: 0 0 24px 0; line-height: 1.6; text-align: center; font-size: 16px; white-space: pre-line; } .dialog .dialog-box button { background: linear-gradient(135deg, var(--btn-primary), #0066cc); color: white; border: none; padding: 14px 28px; border-radius: 12px; cursor: pointer; font-size: 16px; font-weight: 600; transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); margin: 0 6px; box-shadow: 0 4px 16px rgba(0, 102, 204, 0.3); position: relative; overflow: hidden; } .dialog .dialog-box button:hover { transform: translateY(-2px); box-shadow: 0 8px 24px rgba(0, 102, 204, 0.4); } .dialog .dialog-box button:active { transform: translateY(0); color: var(--text-primary); font-weight: 600; cursor: pointer; box-shadow: var(--btn-shadow); margin: 0 5px; } .dialog .dialog-box .secondary-btn { background: linear-gradient(135deg, #95a5a6 0%, #7f8c8d 100%); color: white; } .dialog .dialog-box .danger-btn { background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%); color: white; } #dialogButtons { display: flex; justify-content: center; gap: 12px; margin-top: 20px; } /* 任务完成弹窗特殊样式 */ .dialog.success .dialog-box { background: linear-gradient(135deg, var(--bg-card) 0%, rgba(0, 255, 136, 0.05) 100%); border: 2px solid rgba(0, 255, 136, 0.3); box-shadow: 0 20px 60px rgba(0, 255, 136, 0.2), 0 8px 24px rgba(0, 0, 0, 0.2); } .dialog.success .dialog-box h3 { color: #00ff88; text-shadow: 0 0 10px rgba(0, 255, 136, 0.3); } .dialog.success .dialog-box::after { content: '🎉'; position: absolute; top: -10px; right: -10px; font-size: 24px; animation: celebrate 0.6s ease-out; } @keyframes celebrate { 0% { transform: scale(0) rotate(0deg); opacity: 0; } 50% { transform: scale(1.2) rotate(180deg); opacity: 1; } 100% { transform: scale(1) rotate(360deg); opacity: 1; } } /* 粒子效果 */ .dialog.success .dialog-box::before { background: linear-gradient(90deg, transparent, rgba(0, 255, 136, 0.2), transparent); } /* 成功弹窗的脉冲动画 */ .dialog.success .dialog-box { animation: successPulse 2s ease-in-out infinite; } @keyframes successPulse { 0%, 100% { box-shadow: 0 20px 60px rgba(0, 255, 136, 0.2), 0 8px 24px rgba(0, 0, 0, 0.2); } 50% { box-shadow: 0 20px 60px rgba(0, 255, 136, 0.4), 0 8px 24px rgba(0, 255, 136, 0.1); } } /* 成功弹窗按钮特殊效果 */ .dialog.success button { background: linear-gradient(135deg, #00ff88, #00cc66); box-shadow: 0 4px 16px rgba(0, 255, 136, 0.4); } .dialog.success button:hover { box-shadow: 0 8px 24px rgba(0, 255, 136, 0.6); transform: translateY(-3px); } /* 邀请区高亮样式 */ .invite-highlight { background: var(--bg-secondary); border: 1px solid var(--border-color); border-radius: 16px; padding: 12px; margin-top: 12px; box-shadow: var(--btn-glow); } .invite-highlight .section-title { color: var(--accent-color); } .invite-link-container { display: flex; align-items: center; gap: 8px; } .invite-link-container input { flex: 1; min-width: 0; } .invite-link-container button:hover { background: linear-gradient(135deg, #45a049, #3d8b40) !important; transform: translateY(-1px); box-shadow: 0 2px 4px rgba(0,0,0,0.2); } /* 移动端字体优化 */ @media (max-width: 768px) { html, body { font-size: 18px; /* 基础字体从16px增加到18px */ } /* 顶部区域字体优化 */ .state-label { font-size: 15px !important; /* 从13px增加到15px */ } .subtitle { font-size: 13px !important; /* 从11px增加到13px */ } /* 按钮字体优化 */ .bottom button { font-size: 16px !important; /* 从14px增加到16px */ } .btn, button { font-size: 16px !important; /* 从14px增加到16px */ } /* 设置相关字体优化 */ .setting-title { font-size: 17px !important; /* 从15px增加到17px */ } .setting-desc { font-size: 15px !important; /* 从13px增加到15px */ } .theme-btn { font-size: 16px !important; /* 从14px增加到16px */ } .modern-select { font-size: 16px !important; /* 从14px增加到16px */ } /* 测试按钮字体优化 */ .test-btn, .reset-btn, .settings-btn { font-size: 14px !important; /* 从12px增加到14px */ } /* 测试按钮容器样式 */ .test-buttons { display: flex; flex-wrap: wrap; gap: 8px; margin-top: 8px; } /* 小尺寸测试按钮 */ .test-btn.small { padding: 6px 12px; font-size: 12px; min-width: 60px; } /* 内容区域字体优化 */ .section-title { font-size: 18px !important; /* 从16px增加到18px */ } /* 小字体优化 */ .info, .detail-row, .txn-item { font-size: 16px !important; /* 从14px增加到16px */ } /* 非常小的字体优化 */ .note, .caption { font-size: 14px !important; /* 从12px增加到14px */ } /* 倒计时字体优化 */ #countdown, .countdown { font-size: 26px !important; /* 从24px增加到26px */ } /* 金额显示字体优化 */ .balance, .amount, .price, .value { font-size: 20px !important; /* 从18px增加到20px */ } /* 邀请码和链接字体优化 */ #myInviteCode { font-size: 18px !important; /* 从16px增加到18px */ } #inviteLink { font-size: 13px !important; /* 从11px增加到13px */ } /* 复制按钮字体优化 */ button[onclick*=\"copy\"] { font-size: 13px !important; /* 从11px增加到13px */ } /* 战绩卡字体优化 */ .stats-card { font-size: 13px !important; /* 从11px增加到13px */ } /* 任务相关字体优化 */ .task-item { font-size: 14px !important; /* 从12px增加到14px */ } /* 状态标签字体优化 */ .status-badge { font-size: 12px !important; /* 从10px增加到12px */ } /* 状态2倒计时区域特殊字体优化 */ .countdown-container span[style*=\"font-size: 11px\"] { font-size: 14px !important; /* 挑战倒计时标签从11px增加到14px */ } .countdown-container div[style*=\"font-size: 9px\"] { font-size: 12px !important; /* 168小时挑战标签从9px增加到12px */ } .countdown-container span[style*=\"font-size: 10px\"] { font-size: 13px !important; /* 剩余天数从10px增加到13px */ } /* 战绩卡区域字体优化 */ .grid-stats .stat-item div[style*=\"color: var(--text-secondary)\"] { font-size: 14px !important; /* 战绩卡标签从12px增加到14px */ } .grid-stats .stat-value { font-size: 16px !important; /* 战绩卡数值从14px增加到16px */ } /* 邀请链接区域字体优化 */ div[style*=\"font-size: 12px\"][style*=\"💎 我的专属邀请码\"] { font-size: 15px !important; /* 邀请码标题从12px增加到15px */ } div[style*=\"font-size: 12px\"][style*=\"🔗 邀请链接\"] { font-size: 15px !important; /* 邀请链接标题从12px增加到15px */ } /* 通用小字体优化 - 针对内联样式 */ [style*=\"font-size: 9px\"] { font-size: 12px !important; } [style*=\"font-size: 10px\"] { font-size: 13px !important; } [style*=\"font-size: 11px\"] { font-size: 14px !important; } [style*=\"font-size: 12px\"] { font-size: 15px !important; } } /* 消息弹窗样式 */ .message-header { display: flex; justify-content: space-between; align-items: center; padding: 20px 20px 16px 20px; border-bottom: 1px solid var(--border-color); } .message-title { margin: 0; font-size: 18px; font-weight: 600; color: var(--text-primary); } /* 标签页切换 */ .message-tabs { display: flex; background: var(--bg-secondary); border-radius: 8px; margin: 16px 20px; padding: 4px; gap: 4px; } .tab-btn { flex: 1; padding: 12px 16px; background: transparent; border: none; border-radius: 6px; font-size: 14px; font-weight: 500; color: var(--text-secondary); cursor: pointer; transition: all 0.2s ease; position: relative; display: flex; align-items: center; justify-content: center; gap: 8px; } .tab-btn.active { background: var(--brand); color: white; box-shadow: 0 2px 8px rgba(47, 128, 237, 0.3); } .tab-btn:hover:not(.active) { background: rgba(47, 128, 237, 0.1); color: var(--brand); } /* 功能按钮区域 */ .message-actions { display: flex; justify-content: center; padding: 0 20px 16px 20px; } .mark-all-read-btn { background: linear-gradient(135deg, #28a745, #20c997); color: white; border: none; border-radius: 20px; padding: 8px 16px; font-size: 13px; font-weight: 500; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3); } .mark-all-read-btn:hover { transform: translateY(-1px); box-shadow: 0 4px 12px rgba(40, 167, 69, 0.4); } .mark-all-read-btn:active { transform: translateY(0); } /* 未读消息计数 */ .unread-count { background: #ff4757; color: white; font-size: 11px; font-weight: 600; padding: 2px 6px; border-radius: 10px; min-width: 16px; height: 16px; display: flex; align-items: center; justify-content: center; line-height: 1; } /* 消息内容区域 */ .message-content { height: 400px; overflow-y: auto; padding: 0 20px 20px 20px; } .message-list { display: none; } .message-list.active { display: block; } /* 空消息状态 */ .empty-message { display: flex; flex-direction: column; align-items: center; justify-content: center; height: 200px; color: var(--text-secondary); } .empty-icon { font-size: 48px; margin-bottom: 12px; opacity: 0.6; } .empty-text { font-size: 14px; opacity: 0.8; } /* 消息项样式 */ .message-item { background: var(--bg-secondary); border: 1px solid var(--border-color); border-radius: 12px; padding: 16px; margin-bottom: 12px; transition: all 0.2s ease; position: relative; } .message-item:hover { transform: translateY(-1px); box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); } .message-item.unread { border-left: 4px solid var(--brand); background: rgba(47, 128, 237, 0.05); } .message-item.unread::before { content: ''; position: absolute; top: 16px; right: 16px; width: 8px; height: 8px; background: #ff4757; border-radius: 50%; } .message-header-info { display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 8px; } .message-title-text { font-size: 15px; font-weight: 600; color: var(--text-primary); margin: 0; line-height: 1.3; } .message-time { font-size: 12px; color: var(--text-secondary); white-space: nowrap; margin-left: 12px; } .message-content-text { font-size: 14px; color: var(--text-secondary); line-height: 1.5; margin: 0; } .message-category { display: inline-block; background: rgba(47, 128, 237, 0.1); color: var(--brand); font-size: 11px; font-weight: 500; padding: 2px 8px; border-radius: 12px; margin-top: 8px; } /* 消息按钮闪烁动画 */ @keyframes messageFlash { 0%, 100% { background: var(--btn-gradient); box-shadow: 0 2px 6px var(--accent-shadow); transform: scale(1); } 50% { background: linear-gradient(45deg, #ff6b6b, #4ecdc4); box-shadow: 0 4px 16px rgba(255, 107, 107, 0.4); transform: scale(1.05); } } .message-flash { animation: messageFlash 1.5s ease-in-out infinite; } /* Bug报告表单样式 */ .bug-report-form { background: var(--bg-secondary); border-radius: 12px; padding: 20px; margin-bottom: 20px; } .bug-report-form h4 { margin: 0 0 16px 0; color: var(--text-primary); font-size: 16px; font-weight: 600; } .form-group { margin-bottom: 16px; } .form-group label { display: block; margin-bottom: 6px; color: var(--text-primary); font-size: 14px; font-weight: 500; } .form-group input, .form-group textarea, .form-group select { width: 100%; padding: 10px 12px; border: 1px solid rgba(255, 255, 255, 0.1); border-radius: 8px; background: rgba(255, 255, 255, 0.05); color: var(--text-primary); font-size: 14px; transition: all 0.2s ease; box-sizing: border-box; } .form-group input:focus, .form-group textarea:focus, .form-group select:focus { outline: none; border-color: var(--brand); box-shadow: 0 0 0 2px rgba(47, 128, 237, 0.2); } .submit-bug-btn { background: linear-gradient(135deg, #ff6b6b, #ee5a52); color: white; border: none; border-radius: 20px; padding: 10px 20px; font-size: 14px; font-weight: 500; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 2px 8px rgba(255, 107, 107, 0.3); width: 100%; } .submit-bug-btn:hover { transform: translateY(-1px); box-shadow: 0 4px 12px rgba(255, 107, 107, 0.4); } .bug-list-section { margin-top: 20px; } .bug-list-section h4 { margin: 0 0 12px 0; color: var(--text-primary); font-size: 16px; font-weight: 600; } .bug-item { background: rgba(255, 255, 255, 0.05); border-radius: 8px; padding: 12px; margin-bottom: 8px; border-left: 3px solid #ff6b6b; } .bug-item-header { display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 8px; } .bug-title { font-size: 14px; font-weight: 600; color: var(--text-primary); margin: 0; } .bug-time { font-size: 12px; color: var(--text-secondary); } .bug-description { font-size: 13px; color: var(--text-secondary); line-height: 1.4; margin: 8px 0; } .bug-type { display: inline-block; background: rgba(255, 107, 107, 0.2); color: #ff6b6b; font-size: 11px; font-weight: 500; padding: 2px 8px; border-radius: 12px; } /* 消息按钮未读提示小红点 */ .bottom button[data-key=\"message\"] { position: relative; } .bottom button[data-key=\"message\"].has-unread::after { content: ''; position: absolute; top: -2px; right: -2px; width: 8px; height: 8px; background: #ff4757; border-radius: 50%; border: 2px solid var(--bg-primary); animation: pulse 2s infinite; } @keyframes pulse { 0% { transform: scale(1); opacity: 1; } 50% { transform: scale(1.2); opacity: 0.7; } 100% { transform: scale(1); opacity: 1; } }",
        "______7_": "欢迎加入裂金7日",
        "content": "内容",
        "___": "手续费",
        "__1__": "状态1 - 新手未入金",
        "__2__": "状态2 - 新手已入金",
        "__3__": "状态3 - 本期挑战结束",
        "________1_2_3": "模拟完成新手任务1/2/3",
        "__1": "任务1",
        "__2": "任务2",
        "__3": "任务3",
        "________1_6": "模拟完成大神任务1-6",
        "__4": "任务4",
        "__5": "任务5",
        "__6": "任务6",
        "______________": "是否将此地址设为默认收款地址？",
        "_______________": "完成全部新手任务后解锁大神任务。",
        "reset": "重置",
        "________________________": "退出登录将清除所有本地数据，请确保重要信息已备份",
        "bug__": "Bug标题：",
        "__bug__": "暂无Bug报告",
        "____bug__": "已提交的Bug报告",
        "____100_usdt": "立即入金100 USDT，开启168小时挑战期，解锁任务系统和收益机会。",
        "_____100": "立即激活 100 USDT",
        "___10_______________": "查看前10名收益排行榜，了解潜在收益机会。",
        "__currentmastertask__": "${currentMasterTask ? currentMasterTask.title : '所有大神任务已完成'}",
        "168____": "168小时挑战",
        "__completedtasks____": "${completedTasks === 3 ? '✅ 已完成' : '进行中'}",
        "__quizcorrect___": "${quizCorrect >= 16 ? '✅ 通过' : (completedTasks >= 1 ? '可答题' : '🔒 未解锁')}",
        "__teammembers__": "${teamMembers > 0 ? '↗️ 增长中' : '待发展'}",
        "_": "人",
        "__totalearnings__": "${totalEarnings > 0 ? '📈 盈利中' : '待激活'}",
        "_______totalearnings": "收益率: ${totalEarnings > 0 ? (totalEarnings/100*100).toFixed(1) + '%' : '0%'} ${totalEarnings > 0 ? ' | 日均: ' + (totalEarnings/7).toFixed(2) + ' USDT' : ''}",
        "__totalearnings____": "${totalEarnings === 0 ? '💡 完成任务开始赚取收益' : '🚀 继续完成任务提升收益'}",
        "____168___________": "重新开启168小时挑战，继续赚取收益！",
        "_______completedtasks__3": "新手任务：${completedTasks}/3 完成",
        "_______teammembers__": "团队人数：${teamMembers}人",
        "0___": "0) { teamData.levels.push({ level: level, name: `${level === 1 ? '直推' : level === 2 ? '二级' : level === 3 ? '三级' : level === 4 ? '四级' : level === 5 ? '五级' : level === 6 ? '六级' : '七级'}成员`, count: result.data.members.length, members: result.data.members.map(member => ({ id: member.id, name: member.username, earnings: member.earnings, likes: member.likes || 0, liked: member.liked || false, joinDate: member.joinDate })) }); } } } catch (error) { console.error(`加载第${level}级成员失败:`, error); } } } // 使用本地存储数据作为后备 function loadLocalTeamData() { const savedTeamData = localStorage.getItem('teamData'); if (savedTeamData) { try { const parsedData = JSON.parse(savedTeamData); teamData = { totalMembers: parsedData.totalMembers || 0, directMembers: parsedData.directMembers || 0, teamEarnings: parsedData.teamEarnings || 0, inviteLink: parsedData.inviteLink || generateInviteLink(), levels: parsedData.levels || [] }; } catch (error) { console.error('解析本地团队数据失败:', error); // 使用默认数据 teamData = { totalMembers: 0, directMembers: 0, teamEarnings: 0, inviteLink: generateInviteLink(), levels: [] }; } } else { // 使用默认数据 teamData = { totalMembers: 0, directMembers: 0, teamEarnings: 0, inviteLink: generateInviteLink(), levels: [] }; } updateDisplay(); } // 生成邀请链接 function generateInviteLink() { const userInviteCode = localStorage.getItem('userInviteCode') || ''; return `https://gold7.com/login.html?invite=${userInviteCode}`; } function updateDisplay() { // 确保所有数据都是有效的数值 const totalMembers = Number(teamData.totalMembers) || 0; const directMembers = Number(teamData.directMembers) || 0; const teamEarnings = Number(teamData.teamEarnings) || 0; const inviteLink = teamData.inviteLink || '生成中...'; document.getElementById('totalMembers').textContent = totalMembers; document.getElementById('directMembers').textContent = directMembers; document.getElementById('teamEarnings').textContent = teamEarnings.toFixed(2); document.getElementById('inviteLink').textContent = inviteLink; renderLevels(); } function renderLevels() { const container = document.getElementById('levelsList'); if (!teamData.levels || teamData.levels.length === 0) { container.innerHTML = '",
        "3__currentstate": "3) currentState = 1; countdownStart = null; renderState(); } // 切换到指定状态 function switchToState(state) { if (state === '') return; // 如果选择了空选项，不执行任何操作 currentState = parseInt(state); countdownStart = null; renderState(); // 重置下拉菜单 document.getElementById('stateSelect').value = ''; // 自动关闭设置面板 closeSettings(); } // 激活账号/首次入金 async function activateAccount() { showDialog('激活账号', '请向系统提供的USDT地址支付100 USDT以激活账号。激活后将开启168小时挑战期。'); try { // 尝试调用后端API const response = await StateAPI.activate(); if (response.success) { // 使用后端返回的数据更新状态 currentState = response.data.status; countdownStart = new Date(response.data.countdown_end_time).getTime() - (168 * 60 * 60 * 1000); inviteStart = countdownStart; userLevel = 1; // 记录交易 transactions.push({ type: '激活缴费', amount: -100, fee: 0, net: -100, time: new Date().toISOString(), desc: '首次激活账号缴费' }); // 设置激活时间供quiz.html使用 localStorage.setItem('activationTime', new Date().toISOString()); saveState(); renderState(); showDialog('激活成功', '账号激活成功！168小时挑战期已开始，请完成任务获得收益。'); } } catch (error) { console.warn('后端API调用失败，使用本地模式:', error); // 回退到本地模式 setTimeout(() => { // 首次激活记录交易（入金不影响余额，余额来源于佣金） transactions.push({ type: '激活缴费', amount: -100, fee: 0, net: -100, time: new Date().toISOString(), desc: '首次激活账号缴费' }); // 更新状态 userLevel = 1; currentState = 2; countdownStart = Date.now(); inviteStart = countdownStart; // 设置激活时间供quiz.html使用 localStorage.setItem('activationTime', new Date().toISOString()); saveState(); renderState(); showDialog('激活成功', '账号激活成功！168小时挑战期已开始，请完成任务获得收益。'); }, 1000); } } // 再次入金（复购） async function repurchase() { showDialog('再次激活', '请向系统提供的新USDT地址支付100 USDT以重新激活。重新激活后将开启新的168小时挑战期。'); try { // 尝试调用后端API const response = await StateAPI.repurchase(); if (response.success) { // 使用后端返回的数据更新状态 currentState = response.data.status; countdownStart = new Date(response.data.countdown_end_time).getTime() - (168 * 60 * 60 * 1000); inviteStart = countdownStart; // 记录交易 transactions.push({ type: '复购缴费', amount: -100, fee: 0, net: -100, time: new Date().toISOString(), desc: '复购激活缴费' }); // 设置激活时间供quiz.html使用 localStorage.setItem('activationTime', new Date().toISOString()); saveState(); renderState(); showDialog('复购成功', '复购激活成功！新的168小时挑战期已开始。'); } } catch (error) { console.warn('后端API调用失败，使用本地模式:', error); // 回退到本地模式 setTimeout(() => { // 复购记录交易 transactions.push({ type: '复购缴费', amount: -100, fee: 0, net: -100, time: new Date().toISOString(), desc: '复购激活缴费' }); // 更新状态 currentState = 2; countdownStart = Date.now(); inviteStart = countdownStart; // 设置激活时间供quiz.html使用 localStorage.setItem('activationTime', new Date().toISOString()); saveState(); renderState(); showDialog('复购成功', '复购激活成功！新的168小时挑战期已开始。'); }, 1000); } } // 任务按钮 - 实现按序触发逻辑 function openTasks() { // 找到下一个未完成的任务（按ID顺序） const nextTask = newTasks.find(t => !t.done && t.id === completedNewbieTasks + 1); if (nextTask) { // 显示任务详情 showDialog('当前任务', `任务${nextTask.id}：${nextTask.title}\\n\\n${nextTask.desc}\\n\\n完成奖励：${nextTask.reward} USDT\\n\\n点击确定标记完成`); // 模拟任务完成 setTimeout(() => { nextTask.done = true; // 同步completedNewbieTasks变量，确保与newTasks数组状态一致 completedNewbieTasks = newTasks.filter(t => t.done).length; // 任务奖励 walletBalance += nextTask.reward; totalEarnings += nextTask.reward; // 记录交易 transactions.push({ type: '任务奖励', amount: nextTask.reward, fee: 0, net: nextTask.reward, time: new Date().toISOString(), desc: `完成${nextTask.title}` }); saveState(); renderState(); // 显示任务完成弹窗 showDialog('任务完成', `恭喜完成任务：${nextTask.title}！\\n奖励：${nextTask.reward} USDT\\n当前余额：${walletBalance.toFixed(2)} USDT`); // 检查是否解锁答题任务，直接加入弹窗队列 if (completedNewbieTasks >= 1 && !quizCompleted) { showDialog('解锁答题任务', '恭喜！解锁答题任务，完成可降低提现手续费！\\n\\n当前手续费：' + ((withdrawFeeRate * 100).toFixed(1)) + '%'); } }, 1500); } else if (completedNewbieTasks >= 3) { // 检查答题任务状态 const quizCorrect = parseInt(localStorage.getItem('quizCorrect')) || 0; if (quizCorrect",
        "__showdialog_": "{ showDialog('邀请链接已复制', `有效期剩余 ${document.getElementById('inviteLeft').innerText}。`); }); } // 新的复制邀请链接函数 function copyInviteLink() { const linkInput = document.getElementById('inviteLink'); const link = linkInput.value; if (navigator.clipboard) { navigator.clipboard.writeText(link).then(() => { const detailedTime = getDetailedCountdown(); showDialog('邀请链接已复制', `有效期剩余 ${detailedTime}`); }).catch(() => { fallbackCopy(link); }); } else { fallbackCopy(link); } } // 复制专属邀请码函数 function copyInviteCode() { const codeEl = document.getElementById('myInviteCode'); const code = codeEl.textContent; if (navigator.clipboard) { navigator.clipboard.writeText(code).then(() => { const detailedTime = getDetailedCountdown(); showDialog('邀请码已复制', `专属邀请码: ${code}\\n有效期剩余 ${detailedTime}`); }).catch(() => { fallbackCopyCode(code); }); } else { fallbackCopyCode(code); } } // 获取详细倒计时时间 function getDetailedCountdown() { const total = 168 * 3600 * 1000; const now = Date.now(); const inviteRemainingMs = Math.max(0, (inviteStart + total) - now); const days = Math.floor(inviteRemainingMs / (24 * 3600000)); const hrs = Math.floor((inviteRemainingMs % (24 * 3600000)) / 3600000); const mins = Math.floor((inviteRemainingMs % 3600000) / 60000); let result = ''; if (days > 0) result += `${days}天`; if (hrs > 0) result += `${hrs}小时`; if (mins > 0) result += `${mins}分钟`; if (result === '') result = '不足1分钟'; return result; } // 降级复制方案 function fallbackCopy(text) { const textArea = document.createElement('textarea'); textArea.value = text; document.body.appendChild(textArea); textArea.select(); try { document.execCommand('copy'); const detailedTime = getDetailedCountdown(); showDialog('邀请链接已复制', `有效期剩余 ${detailedTime}`); } catch (err) { showDialog('复制失败', '请手动复制链接'); } document.body.removeChild(textArea); } // 降级复制邀请码方案 function fallbackCopyCode(code) { const textArea = document.createElement('textarea'); textArea.value = code; document.body.appendChild(textArea); textArea.select(); try { document.execCommand('copy'); const detailedTime = getDetailedCountdown(); showDialog('邀请码已复制', `专属邀请码: ${code}\\n有效期剩余 ${detailedTime}`); } catch (err) { showDialog('复制失败', '请手动复制邀请码'); } document.body.removeChild(textArea); } // 抢红包 - 跳转到红包页面 function grabRedPacket() { // 检查资格：仅状态2有红包按钮 if (currentState !== 2) { showDialog('无抢红包资格', '只有在激活状态才可以抢红包。'); return; } // 跳转到红包页面 window.location.href = 'redpacket.html'; } // 我的团队 function showTeam() { // 跳转到团队页面 window.location.href = 'team.html'; } // 我的钱包 function showWallet() { // 跳转到钱包页面 window.location.href = 'wallet.html'; } // 排行榜 function showRanking() { // 跳转到排行榜页面 window.location.href = 'ranking.html'; } function showRedRanking() { showDialog('红包排行榜', '按红包收入USDT总额排行。'); } function showGodRanking() { showDialog('大神排行榜', '按大神等级排行。'); } function openGodTasks() { showDialog('大神任务', '请在卡片中查看大神任务目标。'); } /* 高级对话框 */ // 弹窗队列管理 let dialogQueue = []; let isDialogShowing = false; function showDialog(title, msg, buttons = null, type = 'normal', callback = null) { // 如果当前有弹窗正在显示，将新弹窗加入队列 if (isDialogShowing) { dialogQueue.push({ title, msg, buttons, type, callback }); return; } isDialogShowing = true; const dialog = document.getElementById('dialog'); const dialogTitle = document.getElementById('dialogTitle'); const dialogMsg = document.getElementById('dialogMsg'); const dialogButtons = document.getElementById('dialogButtons'); dialogTitle.innerText = title; dialogMsg.innerText = msg; // 根据类型添加特殊样式 dialog.className = 'dialog'; if (title.includes('任务完成') || title.includes('恭喜') || title.includes('成功') || title.includes('抢红包成功') || title.includes('激活成功') || type === 'success') { dialog.classList.add('success'); } if (type === 'redpacket') { dialog.classList.add('redpacket'); } if (type === 'countdown') { dialog.classList.add('countdown'); } if (buttons && Array.isArray(buttons)) { // 自定义按钮 dialogButtons.innerHTML = ''; buttons.forEach(button => { const btn = document.createElement('button'); btn.textContent = button.text; btn.className = button.style === 'danger' ? 'danger-btn' : (button.style === 'secondary' ? 'secondary-btn' : ''); btn.onclick = () => { closeDialog(() => { // 处理WebSocket消息中的特殊动作 if (button.action === 'grabRedPacket') { grabRedPacket(); } else if (button.action === 'showTasks') { // 显示任务页面或任务弹窗 showTasks(); } else if (button.action === 'close') { // 仅关闭弹窗，无其他动作 } else if (button.action) { button.action(); } if (callback) { callback(); } }); }; dialogButtons.appendChild(btn); }); } else { // 默认确定按钮 dialogButtons.innerHTML = ''; const defaultBtn = document.createElement('button'); defaultBtn.textContent = i18n.t('confirm'); defaultBtn.onclick = () => { closeDialog(callback); }; dialogButtons.appendChild(defaultBtn); } // 显示弹窗并添加动画 dialog.style.display = 'flex'; setTimeout(() => { dialog.classList.add('show'); }, 10); } function closeDialog(callback = null) { const dialog = document.getElementById('dialog'); dialog.classList.remove('show'); setTimeout(() => { dialog.style.display = 'none'; dialog.className = 'dialog'; // 重置类名 isDialogShowing = false; if (callback) { callback(); } // 处理队列中的下一个弹窗，添加500ms延迟避免视觉冲突 if (dialogQueue.length > 0) { setTimeout(() => { const nextDialog = dialogQueue.shift(); showDialog(nextDialog.title, nextDialog.msg, nextDialog.buttons, nextDialog.type, nextDialog.callback); }, 500); } }, 300); } /** * 重置测试数据 */ function resetTestData() { if(confirm(i18n.t('confirm_reset_data'))) { // 重置所有任务状态 newTasks.forEach(task => task.done = false); quizCompleted = false; godTasksCompleted = false; // 生成随机团队人数 (1-50人) const randomTeamSize = Math.floor(Math.random() * 50) + 1; // 设置余额为团队人数*10 USDT const newBalance = randomTeamSize * 10; // 清空localStorage中的相关数据 localStorage.removeItem('userTasks'); localStorage.removeItem('quizCompleted'); localStorage.removeItem('godTasksCompleted'); localStorage.removeItem('userBalance'); localStorage.removeItem('teamSize'); // 重置答题相关数据 localStorage.removeItem('quizIndex'); localStorage.removeItem('quizCorrect'); localStorage.setItem('withdrawFeeRate', '0.05'); // 重置手续费为5% // 清除交易记录和应用状态数据 localStorage.removeItem('transactions'); localStorage.removeItem('appState'); localStorage.removeItem('teamData'); localStorage.removeItem('recentRed'); // 重置全局变量到初始状态 transactions = []; userLevel = 0; completedNewbieTasks = 0; godTasksUnlocked = false; teamMembers = randomTeamSize; totalEarnings = randomTeamSize * 10; withdrawFeeRate = 0.05; walletBalance = randomTeamSize * 10; countdownStart = null; inviteStart = null; // 设置新的数据到localStorage localStorage.setItem('teamSize', randomTeamSize.toString()); localStorage.setItem('userBalance', newBalance.toString()); // 重置到状态1 currentState = 1; // 重新渲染页面 renderState(); // 强制显示风格选择弹窗 showForceThemeSelection(randomTeamSize, newBalance); } } /** * 强制风格选择弹窗 */ function showForceThemeSelection(teamSize, balance) { const themes = { 'cyberpunk': { name: i18n.t('theme_cyberpunk'), icon: '🌆', description: i18n.t('theme_cyberpunk_desc') }, 'business': { name: i18n.t('theme_business'), icon: '💼', description: i18n.t('theme_business_desc') }, 'dark-tech': { name: i18n.t('theme_dark_tech'), icon: '⚡', description: i18n.t('theme_dark_tech_desc') }, 'fresh': { name: i18n.t('theme_fresh'), icon: '🌿', description: i18n.t('theme_fresh_desc') } }; const themeOptionsHTML = Object.entries(themes).map(([key, theme]) => `",
        "__currenttask_desc__": "${currentTask.desc ? currentTask.desc : '完成此任务可推进进度。'}",
        "____type____": "暂无${type === 'official' ? '官方公告' : '团队消息'}",
        "______join_": "`; }).join(''); } // 搜索过滤 function filterQuestions() { const searchTerm = document.getElementById('searchInput').value.toLowerCase(); filteredQuestions = questions.filter(question => question.q.toLowerCase().includes(searchTerm) || question.options.some(option => option.toLowerCase().includes(searchTerm)) || (question.wrongMsg && question.wrongMsg.toLowerCase().includes(searchTerm)) ); renderQuestions(); } // 显示添加模态框 function showAddModal() { editingIndex = -1; document.getElementById('modalTitle').textContent = '添加题目'; document.getElementById('questionForm').reset(); document.getElementById('questionModal').style.display = 'block'; } // 编辑题目 function editQuestion(index) { editingIndex = index; const question = questions[index]; document.getElementById('modalTitle').textContent = '编辑题目'; document.getElementById('questionText').value = question.q; document.getElementById('option1').value = question.options[0]; document.getElementById('option2').value = question.options[1]; document.getElementById('option3').value = question.options[2]; document.getElementById('option4').value = question.options[3]; document.getElementById('wrongMessage').value = question.wrongMsg || ''; // 设置正确答案 const correctIndex = question.options.indexOf(question.a); if (correctIndex !== -1) { document.querySelector(`input[name=\"correctAnswer\"][value=\"${correctIndex}\"]`).checked = true; } document.getElementById('questionModal').style.display = 'block'; } // 删除题目 function deleteQuestion(index) { if (confirm('确定要删除这道题目吗？此操作不可撤销。')) { questions.splice(index, 1); updateStats(); filterQuestions(); showNotification('题目已删除', 'success'); } } // 预览题目 function previewQuestion(index) { const question = questions[index]; alert(`题目：${question.q}\\n\\n选项：\\nA. ${question.options[0]}\\nB. ${question.options[1]}\\nC. ${question.options[2]}\\nD. ${question.options[3]}\\n\\n正确答案：${question.a}\\n\\n错误提示：${question.wrongMsg || '无'}`); } // 关闭模态框 function closeModal() { document.getElementById('questionModal').style.display = 'none'; } // 表单提交 document.getElementById('questionForm').addEventListener('submit', function(e) { e.preventDefault(); const questionText = document.getElementById('questionText').value.trim(); const options = [ document.getElementById('option1').value.trim(), document.getElementById('option2').value.trim(), document.getElementById('option3').value.trim(), document.getElementById('option4').value.trim() ]; const correctAnswerIndex = parseInt(document.querySelector('input[name=\"correctAnswer\"]:checked').value); const wrongMessage = document.getElementById('wrongMessage').value.trim(); // 验证 if (!questionText) { alert('请输入题目内容'); return; } if (options.some(option => !option)) { alert('请填写所有选项'); return; } const newQuestion = { q: questionText, options: options, a: options[correctAnswerIndex], wrongMsg: wrongMessage }; if (editingIndex === -1) { // 添加新题目 questions.push(newQuestion); showNotification('题目添加成功', 'success'); } else { // 编辑现有题目 questions[editingIndex] = newQuestion; showNotification('题目更新成功', 'success'); } updateStats(); filterQuestions(); closeModal(); }); // 导出题库 function exportQuestions() { const dataStr = JSON.stringify(questions, null, 2); const dataBlob = new Blob([dataStr], {type: 'application/json'}); const url = URL.createObjectURL(dataBlob); const link = document.createElement('a'); link.href = url; link.download = `quiz-questions-${new Date().toISOString().split('T')[0]}.json`; link.click(); URL.revokeObjectURL(url); showNotification('题库导出成功', 'success'); } // 导入题库 function importQuestions() { document.getElementById('importFile').click(); } function handleImport(event) { const file = event.target.files[0]; if (!file) return; const reader = new FileReader(); reader.onload = function(e) { try { const importedQuestions = JSON.parse(e.target.result); if (Array.isArray(importedQuestions) && importedQuestions.length > 0) { if (confirm(`确定要导入 ${importedQuestions.length} 道题目吗？这将替换当前所有题目。`)) { questions = importedQuestions; updateStats(); filterQuestions(); showNotification('题库导入成功', 'success'); } } else { alert('导入文件格式不正确'); } } catch (error) { alert('导入文件解析失败：' + error.message); } }; reader.readAsText(file); } // 预览答题 function previewQuiz() { window.open('quiz.html', '_blank'); } // 显示通知 function showNotification(message, type = 'info') { // 简单的通知实现 const notification = document.createElement('div'); notification.style.cssText = ` position: fixed; top: 20px; right: 20px; padding: 15px 20px; background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : '#2196F3'}; color: white; border-radius: 8px; box-shadow: 0 4px 15px rgba(0,0,0,0.2); z-index: 10000; font-weight: 600; `; notification.textContent = message; document.body.appendChild(notification); setTimeout(() => { notification.remove(); }, 3000); } // 点击模态框外部关闭 window.onclick = function(event) { const modal = document.getElementById('questionModal'); if (event.target === modal) { closeModal(); } }",
        "__messagereadstatus_message_id_": "{ messageReadStatus[message.id] = true; }); // 保存数据并更新界面 saveMessages(); updateMessageButton(); updateTabUnreadCount(); renderMessageList(type); // 显示成功提示 alert(`已将所有${type === 'official' ? '官方公告' : '团队消息'}标记为已读`); } // 更新消息按钮状态（现在更新消息图标状态） function updateMessageButton() { const messageIcon = document.querySelector('.message-icon'); const unreadDot = document.querySelector('#messageUnreadDot'); if (!messageIcon || !unreadDot) return; // 检查是否有未读消息 const hasUnread = [...messages.official, ...messages.team].some(msg => !messageReadStatus[msg.id]); if (hasUnread) { messageIcon.classList.add('has-unread'); unreadDot.style.display = 'block'; } else { messageIcon.classList.remove('has-unread'); unreadDot.style.display = 'none'; } } // 更新标签页未读计数 function updateTabUnreadCount() { const officialCount = messages.official.filter(msg => !messageReadStatus[msg.id]).length; const teamCount = messages.team.filter(msg => !messageReadStatus[msg.id]).length; // 更新官方公告标签 const officialTab = document.querySelector('[onclick=\"switchMessageTab(\\'official\\')\"]'); if (officialTab) { const countEl = officialTab.querySelector('.unread-count'); if (officialCount > 0) { if (!countEl) { officialTab.innerHTML += `",
        "______________ta": "分享你的专属邀请链接给好友，TA 通过该链接注册并在 168 小时内激活后即可成为你的团队成员。",
        "function_loadinvite__": "function loadInvite() { // 从appState加载邀请数据 const appState = JSON.parse(localStorage.getItem('appState') || '{}'); const inviteData = appState.inviteData || {}; const link = inviteData.link; const expires = inviteData.expires || 0; const now = Date.now(); const linkBox = document.getElementById('linkBox'); const timeInfo = document.getElementById('timeInfo'); const copyBtn = document.getElementById('copyBtn'); if (link && expires > now) { linkBox.textContent = link; const left = expires - now; const hours = Math.floor(left / 3600000); const minutes = Math.floor((left % 3600000) / 60000); timeInfo.textContent = `剩余有效时间：${hours}小时${minutes}分钟`; copyBtn.disabled = false; // 启动倒计时更新 if (window.inviteTimer) clearInterval(window.inviteTimer); window.inviteTimer = setInterval(() => { const nowTime = Date.now(); if (expires",
        "__alert_": "{ alert('已复制邀请链接到剪贴板'); }).catch(() => { // 降级方案：创建临时文本框复制 const textArea = document.createElement('textarea'); textArea.value = link; document.body.appendChild(textArea); textArea.select(); try { document.execCommand('copy'); alert('已复制邀请链接'); } catch (err) { alert('复制失败，请手动复制链接'); } document.body.removeChild(textArea); }); } // 页面卸载时清理定时器 window.addEventListener('beforeunload', () => { if (window.inviteTimer) clearInterval(window.inviteTimer); }); window.addEventListener('DOMContentLoaded', loadInvite);",
        "___7_____": "🏆 7天财富挑战",
        "login": "登录",
        "register": "注册",
        "password": "密码",
        "__const": "{ const params = getUrlParams(); if (!params.token || !params.email) { document.getElementById('errorStateMessage').textContent = '重置链接格式错误或已失效，请重新申请密码重置。'; showState('errorState'); } });",
        "_______document_queryselector_": "进入注册`; document.querySelector('#registerForm .card').insertBefore(inviteInfo, document.querySelector('#registerForm .card').firstChild); } })(); // API配置 const API_BASE_URL = 'http://localhost:3000'; // 登录功能 document.getElementById('loginBtn').addEventListener('click', async () => { const loginBtn = document.getElementById('loginBtn'); const email = document.getElementById('loginEmail').value.trim(); const password = document.getElementById('loginPassword').value; // 清除之前的错误状态 clearError('loginEmail'); clearError('loginPassword'); // 添加加载状态 loginBtn.classList.add('loading-btn'); loginBtn.disabled = true; try { // 测试模式：如果没有填写邮箱密码，使用默认测试账号 if(!email && !password) { // 使用测试账号自动登录 const testUser = { id: 1, email: 'test@gold7.com', inviteCode: 'TEST001', status: 2, balance: 1000.00, teamCount: 5, activationCount: 1, countdownEndTime: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() }; localStorage.setItem('currentUser', JSON.stringify(testUser)); localStorage.setItem('authToken', 'test-token-' + Date.now()); localStorage.setItem('userEmail', testUser.email); alert('测试模式登录成功！'); window.location.href = 'index.html'; return; } if(!email || !password) { showError('loginEmail', '请输入邮箱和密码，或直接点击登录使用测试模式'); loginBtn.classList.remove('loading-btn'); loginBtn.disabled = false; return; } // 简单校验邮箱格式 if(!/.+@.+\\..+/.test(email)) { showError('loginEmail', '邮箱格式不正确'); loginBtn.classList.remove('loading-btn'); loginBtn.disabled = false; return; } // 尝试连接后端API const response = await fetch(`${API_BASE_URL}/api/auth/login`, { method: 'POST', headers: { 'Content-Type': 'application/json', }, credentials: 'include', body: JSON.stringify({ email, password }) }); const data = await response.json(); if (response.ok && data.success) { // 登录成功 localStorage.setItem('authToken', data.data.token); localStorage.setItem('currentUser', JSON.stringify(data.data.user)); localStorage.setItem('userEmail', data.data.user.email); alert('登录成功！'); window.location.href = 'index.html'; } else { // 处理邮箱未验证的情况 if (data.message && data.message.includes('邮箱未验证')) { showError('loginEmail', data.message + '",
        "__showlogin___": "{ showLogin(); }, 3000); } else { showError('registerEmail', data.message || '注册失败'); registerBtn.classList.remove('loading-btn'); registerBtn.disabled = false; } } catch (error) { console.error('注册错误:', error); // 如果后端不可用，使用本地存储验证 // 检查邮箱是否已注册 const storedEmail = localStorage.getItem('userEmail'); if(storedEmail === email) { showError('registerEmail', '该邮箱已注册，请直接登录'); switchTab('login'); document.getElementById('loginEmail').value = email; registerBtn.classList.remove('loading-btn'); registerBtn.disabled = false; return; } // 保存到 localStorage (模拟注册) localStorage.setItem('userEmail', email); localStorage.setItem('userPassword', password); localStorage.setItem('myInviterCode', invite); // 保存邀请我的人的邀请码 // 设置状态1 (新手未入金) localStorage.setItem('userStatus', '1'); // 建立邀请关系 - 将自己添加到邀请人的团队中 const inviteRelations = JSON.parse(localStorage.getItem('inviteRelations') || '{}'); if (!inviteRelations[invite]) { inviteRelations[invite] = []; } inviteRelations[invite].push({ email: email, joinTime: new Date().toISOString(), status: 'registered' }); localStorage.setItem('inviteRelations', JSON.stringify(inviteRelations)); alert('注册成功（离线模式）！即将跳转首页'); window.location.href = 'index.html'; registerBtn.classList.remove('loading-btn'); registerBtn.disabled = false; } }); // 回车键登录/注册 document.addEventListener('keypress', function(e) { if(e.key === 'Enter') { const activeForm = document.querySelector('.form-container.active'); if(activeForm.id === 'loginForm') { document.getElementById('loginBtn').click(); } else { document.getElementById('registerBtn').click(); } } });",
        "___edit": "✏️ 编辑",
        "____preview": "👁️ 预览",
        "____deletion": "🗑️ 删除",
        "_____7_": "// 裂金7日 · 20题测验题库 const QUESTIONS = [ { q: '你的专属邀请链接有效期是多久？', options: ['24小时', '72小时', '168小时（7天）', '永久'], a: '168小时（7天）', wrongMsg: '链接168小时后失效，无法继续邀请；时间内越早引爆，结构成长越快。' }, { q: '\"红包\"和\"7层返利\"，哪一句最贴切？', options: ['抢红包才有返利', '红包=今天的快感，返利=结构里明天的长流水', '红包金额决定返利金额', '红包次数越多，层级越深'], a: '红包=今天的快感，返利=结构里明天的长流水', wrongMsg: '红包=短促小雨点，来得快去得快；返利=结构水库，自己往下流。\\n你要的不是一把伞，而是一座水坝。' }, { q: '你的7层网络里任意一层新增1位\"激活\"的成员，你拿到？', options: ['随机金额', '$10 / 每层 / 每人', '只有直推(第1层)才有$10', '只有前三层有$10'], a: '$10 / 每层 / 每人', wrongMsg: '结构返利是每层每人$10，最多追踪到7层；越会\"教下去\"，层数越快被点亮。' }, { q: '小算术：你直推2人（第1层=2），他们各自再推2人（第2层=4），全部激活。你拿的结构返利合计？', options: ['$20', '$40', '$60', '$80'], a: '$60', wrongMsg: '第1层2×$10=$20，第2层4×$10=$40，合计**$60**。层级一旦动起来，收益叠加非常快。' }, { q: '哪个比喻最贴近\"结构优于单打独斗\"的本质？', options: ['红包像小雨点，结构像水库', '红包像大奖，结构像运气', '结构全靠偶然', '红包越多，层级越深'], a: '红包像小雨点，结构像水库', wrongMsg: '红包是即刻的\"小雨点\"；结构是能蓄水并持续来水的\"水库\"——关键是让水沿层级自己流。' }, { q: '想让结构真正\"动\"起来，下面哪步最关键？', options: ['自己再直推3人', '再抢一轮红包', '改头像、发海报', '教会你的第1层去教TA的下一级'], a: '教会你的第1层去教TA的下一级', wrongMsg: '从\"会拉人\"升级为\"会带人去带人\"，层数才会级联点亮。' }, { q: '168小时窗口关掉后，你还能留下什么？', options: ['邀请与红包继续', '一切清零', '只能直推有返利', '你搭好的\"水库\"会自己流，但你再也加不进一滴水'], a: '你搭好的\"水库\"会自己流，但你再也加不进一滴水', wrongMsg: '入口锁死，红包与邀请全灭。\\n但你这7天搭的水库，会替你把水流到手里。\\n区别只是——别人7天拼出水坝，你还在空杯等雨。' }, { q: '想把结构的\"爆炸型增长曲线\"真正点燃，最核心的一件事是？', options: ['自己多拉一点', '多发广告', '盯着红包', '把教程下放，让每个节点都会\"再教人\"'], a: '把教程下放，让每个节点都会\"再教人\"', wrongMsg: '等比爆发来自复制能力的复制，不是个人体力活。' }, { q: '你已直推2位，下一步最增效的是？', options: ['各花30分钟，分别陪他们完成1次首邀', '自己再拉1人', '停几天', '做更酷的宣传图'], a: '各花30分钟，分别陪他们完成1次首邀', wrongMsg: '扶上马并送一程，他们就能自己跑、还会带人。' }, { q: '复制思路里，哪句最关键？', options: ['先做满好多天', '每个新人都\"带出他的第一单\"', '等系统推人', '内容越花越好'], a: '每个新人都\"带出他的第一单\"', wrongMsg: '第一单被带出，他的心气就立住了，复制链条才真正启动。' }, { q: '理想等比：若每人带2个，只到第3层，总人数（不含你）是？', options: ['8', '10', '16', '14'], a: '14', wrongMsg: '2+4+8=14；到第3层就能明显感觉越做越轻。' }, { q: '哪种选择更强？', options: ['教2个会教人的人', '一次拉10个但没人会教', '随缘等系统', '只抢即时奖励'], a: '教2个会教人的人', wrongMsg: '会教人的种子会长出很多枝丫；10个不会教=很快静默。' }, { q: '如果今天只能做一件事，选哪个？', options: ['把一个新人\"带出第一单\"', '写一篇长教程', '修一张海报', '刷一小时群'], a: '把一个新人\"带出第一单\"', wrongMsg: '第一单=点火按钮；其余都是铺垫。' }, { q: '真正引爆曲线的本质一刀是？', options: ['我自己更努力', '做更多素材', '让每个新人能带出他的第一单，并教他也这么做', '盯排行榜'], a: '让每个新人能带出他的第一单，并教他也这么做', wrongMsg: '爆发来自\"会的人越来越多\"，不是你一个人更累。' }, { q: '今天只做一件事，哪件最\"划算\"？', options: ['约1位\"最熟的熟人\"语音60秒，当场发出首条邀请', '写宣传文案', '修图', '学半天方法论'], a: '约1位\"最熟的熟人\"语音60秒，当场发出首条邀请', wrongMsg: '强关系×当场出手，最快出第一单。' }, { q: '晚上黄金1小时，你该做？', options: ['修图', '写长文', '刷群', '开三通语音：各带1位完成首邀/发出第一条邀请'], a: '开三通语音：各带1位完成首邀/发出第一条邀请', wrongMsg: '语音×三次小胜利，效率比素材高太多。' }, { q: '明天最该盯哪项结构指标？', options: ['红包次数', '排名', '私聊人数', '二层新增\"首邀达成数\"'], a: '二层新增\"首邀达成数\"', wrongMsg: '二层首邀上来，结构才开始\"自己跑\"。' }, { q: '如果对方犹豫，你最能点燃他的一句话是？', options: ['\"你先付钱再说\"', '\"你慢慢研究\"', '\"我们先从最稳的一个朋友试起，我全程陪着你\"', '\"无所谓，看你吧\"'], a: '\"我们先从最稳的一个朋友试起，我全程陪着你\"', wrongMsg: '陪跑=信心灌输。\\n第一步不是他一个人跳，而是你拉着他过河。\\n试点+陪跑，最容易让人点火成功。' }, { q: '首邀成功后，黄金5分钟干嘛？', options: ['放一天', '只发表情', '立刻去拉陌生人', '复盘3句话：怎么说、怎么演示、下一位是谁'], a: '复盘3句话：怎么说、怎么演示、下一位是谁', wrongMsg: '复盘→固化→再复制，热度最值钱。' }, { q: '规模化真正的\"第一脚油门\"？', options: ['我更努力', '多做素材', '让每个新人都能带出他的第一单，并教会他复制这三步', '盯排行榜'], a: '让每个新人都能带出他的第一单，并教会他复制这三步', wrongMsg: '爆发来自会的人越来越多，不是你一个人更累。' } ]; let currentIndex = 0; let correctCount = 0; let selectedOption = null; function loadProgress() { const idx = parseInt(localStorage.getItem('quizIndex')); const cnt = parseInt(localStorage.getItem('quizCorrect')); if (!isNaN(idx)) currentIndex = idx; if (!isNaN(cnt)) correctCount = cnt; } function saveProgress() { localStorage.setItem('quizIndex', currentIndex); localStorage.setItem('quizCorrect', correctCount); // 更新手续费比例：5% - 正确题数*0.2%，最低1% let rate = 0.05 - correctCount * 0.002; if (rate",
        "__20": "= 20 || currentIndex >= QUESTIONS.length) { document.getElementById('question').innerText = '答题任务完成'; document.getElementById('options').innerHTML = ''; document.getElementById('status').innerText = `你答对了 ${correctCount} 题，提现手续费已降至 ${(parseFloat(localStorage.getItem('withdrawFeeRate'))*100).toFixed(1)}%。`; document.getElementById('submitBtn').style.display = 'none'; // 显示返回按钮 const bottomDiv = document.querySelector('.bottom'); bottomDiv.style.display = 'flex'; bottomDiv.innerHTML = '",
        "__return_": "'; return; } // 按时间倒序显示最近10条记录 tx.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)) .slice(0, 10) .forEach((t, idx) => { const li = document.createElement('li'); li.className = 'txn-item'; const leftDiv = document.createElement('div'); leftDiv.className = 'txn-left'; const title = document.createElement('span'); title.className = 'txn-title'; title.innerText = t.description || t.type || '未知交易'; leftDiv.appendChild(title); // 如果是提现交易且有状态信息，显示状态 if (t.type === 'withdraw' && t.status && t.statusText) { const status = document.createElement('span'); status.className = 'txn-status'; // 根据状态设置不同的样式 if (t.status === 'processing') { status.className += ' status-processing'; } else if (t.status === 'confirming') { status.className += ' status-confirming'; } else if (t.status === 'completed') { status.className += ' status-completed'; } status.innerText = t.statusText; leftDiv.appendChild(status); } const amt = document.createElement('span'); const amount = parseFloat(t.amount) || 0; if (t.type === 'task_reward') { // 任务奖励：如果金额为0，不显示金额，只显示描述 if (amount === 0) { amt.style.display = 'none'; } else { amt.className = 'txn-amount pos'; amt.innerText = '+' + Math.abs(amount).toFixed(2) + ' USDT'; } } else if (t.type === 'red_packet') { amt.className = 'txn-amount pos'; amt.innerText = '+' + Math.abs(amount).toFixed(2) + ' USDT'; } else if (t.type === 'withdraw' || t.type === 'activation' || t.type === 'repurchase') { amt.className = 'txn-amount neg'; amt.innerText = '-' + Math.abs(amount).toFixed(2) + ' USDT'; } else { amt.className = 'txn-amount'; amt.innerText = amount.toFixed(2) + ' USDT'; } li.appendChild(leftDiv); li.appendChild(amt); listEl.appendChild(li); }); } async function withdraw() { const balance = parseFloat(document.querySelector('.balance').textContent.replace(' USDT', '')); const walletAddress = localStorage.getItem('walletAddress'); if (!walletAddress) { alert('请先绑定钱包地址'); return; } if (balance",
        "1____a": "1. 用户A",
        "_____200": "团队人数：200",
        "2____b": "2. 用户B",
        "_____150": "团队人数：150",
        "3____c": "3. 用户C",
        "_____120": "团队人数：120",
        "let_currenttab": "// 排行榜数据已移至后端API，此字段保留用于兼容性",
        "function_loaddetail__": "function loadDetail() { const params = new URLSearchParams(window.location.search); const name = params.get('name') || '未知用户'; const rank = params.get('rank') || '—'; document.getElementById('name').textContent = name; document.getElementById('rank').textContent = rank; // 模拟其他数据 document.getElementById('team').textContent = Math.floor(Math.random()*200); document.getElementById('red').textContent = (Math.random()*1000).toFixed(2) + ' USDT'; const levels = ['无','大神一级','大神二级','大神三级','大神四级','大神五级','大神六级']; document.getElementById('level').textContent = levels[Math.floor(Math.random()*levels.length)]; } window.addEventListener('DOMContentLoaded', loadDetail);",
        "___grab": "🧧 抢红包",
        "progress": "进行中",
        "__________________": "设为默认后，下次提现将自动填入此地址，方便您快速操作。",
        "currenttime___": "currentTime) { nextWindow = windowTime - currentTime; nextRound = i + 1; break; } } // 如果今天没有下一轮，计算明天第一轮 if (!nextWindow) { const tomorrowFirst = 24 * 3600 + RED_PACKET_TIMES[0].hour * 3600 + RED_PACKET_TIMES[0].minute * 60; const currentTime = currentHour * 3600 + currentMinute * 60 + currentSecond; nextWindow = tomorrowFirst - currentTime; nextRound = 1; } return { inWindow: false, nextRound: nextRound, timeLeft: nextWindow }; } // 格式化时间显示 function formatTime(seconds) { if (seconds",
        "windowhour___": "windowHour || (currentHour === windowHour && currentMinute > 1)) { slot.className = 'time-slot'; slot.querySelector('div:last-child').textContent = '已结束'; } else if (currentHour === windowHour && currentMinute",
        "__record_username___": "${record.username || '匿名用户'}",
        "___listel_appendchild_itemel__": "`; listEl.appendChild(itemEl); }); } // 更新红包池金额（模拟动态变化） function updatePoolAmount() { const poolEl = document.getElementById('poolAmount'); const baseAmount = 8888.88; const variation = Math.sin(Date.now() / 10000) * 500; const currentAmount = baseAmount + variation; poolEl.textContent = currentAmount.toLocaleString('zh-CN', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ' USDT'; } // 页面初始化 async function init() { // 加载红包记录 await loadRedpacketRecords(); // 渲染上一期红包排行榜（如果API没有数据则使用默认数据） renderRecentList(); // 更新界面状态 updateStatus(); // 设置定时器 setInterval(updateStatus, 1000); setInterval(updatePoolAmount, 3000); setInterval(loadRedpacketRecords, 30000); // 每30秒刷新一次红包记录 console.log('红包页面初始化完成'); } // 页面加载完成后初始化 window.addEventListener('DOMContentLoaded', init);",
        "_______________6___": "请输入您的新密码，密码至少需要6位字符。",
        "____url____": "// 从URL获取参数 function getUrlParams() { const urlParams = new URLSearchParams(window.location.search); return { token: urlParams.get('token'), email: urlParams.get('email') }; } // 显示不同状态 function showState(stateName) { const states = ['loadingState', 'successState', 'errorState', 'resendState']; states.forEach(state => { document.getElementById(state).classList.add('hidden'); }); document.getElementById(stateName).classList.remove('hidden'); } function showErrorState(message = '验证链接无效或已过期，请重新发送验证邮件。') { document.getElementById('errorMessage').textContent = message; showState('errorState'); } // 验证邮箱 async function verifyEmail() { const params = getUrlParams(); if (!params.token || !params.email) { showErrorState('验证链接格式错误，缺少必要参数。'); return; } try { const response = await fetch(`/api/auth/verify-email?token=${params.token}&email=${encodeURIComponent(params.email)}`, { method: 'GET', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { showState('successState'); } else { showErrorState(data.message || '验证失败，请重试。'); } } catch (error) { console.error('验证邮箱失败:', error); showErrorState('网络错误，请检查网络连接后重试。'); } } // 重新发送验证邮件 function resendVerification() { const params = getUrlParams(); if (params.email) { document.getElementById('resendEmail').value = params.email; } showState('resendState'); } // 发送验证邮件 async function sendVerificationEmail() { const email = document.getElementById('resendEmail').value.trim(); const resendBtn = document.getElementById('resendBtn'); if (!email) { alert('请输入邮箱地址'); return; } if (!email.includes('@')) { alert('请输入有效的邮箱地址'); return; } resendBtn.disabled = true; resendBtn.textContent = '发送中...'; try { const response = await fetch('/api/auth/resend-verification', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email }) }); const data = await response.json(); if (data.success) { alert('验证邮件已发送，请检查您的邮箱！'); showErrorState('验证邮件已重新发送，请检查您的邮箱并点击验证链接。'); } else { alert(data.message || '发送失败，请重试'); } } catch (error) { console.error('发送验证邮件失败:', error); alert('网络错误，请重试'); } finally { resendBtn.disabled = false; resendBtn.textContent = '发送验证邮件'; } } // 页面加载时自动验证 window.addEventListener('load', () => { verifyEmail(); });",
        "const_api_base_url": "const API_BASE_URL = 'http://localhost:3000'; let teamData = { totalMembers: 0, directMembers: 0, teamEarnings: 0, inviteLink: '', levels: [] }; // 从后端API加载团队数据 async function loadTeamData() { try { const userId = localStorage.getItem('userId') || 'default'; // 获取团队信息 const teamInfoResponse = await fetch(`${API_BASE_URL}/api/team/info?userId=${userId}`); if (!teamInfoResponse.ok) { throw new Error('获取团队信息失败'); } const teamInfo = await teamInfoResponse.json(); if (teamInfo.success) { const data = teamInfo.data; teamData.totalMembers = data.teamStats.totalMembers || 0; teamData.directMembers = data.teamStructure.directInvites || 0; teamData.teamEarnings = data.teamStats.totalRewards || 0; // 获取邀请链接 const inviteLinkResponse = await fetch(`${API_BASE_URL}/api/team/invite?userId=${userId}`); if (inviteLinkResponse.ok) { const inviteData = await inviteLinkResponse.json(); if (inviteData.success) { teamData.inviteLink = inviteData.data.inviteLink; } } // 加载各层级成员数据 await loadTeamLevels(userId); updateDisplay(); } else { console.error('获取团队信息失败:', teamInfo.message); // 使用本地存储的数据作为后备 loadLocalTeamData(); } } catch (error) { console.error('加载团队数据失败:', error); // 使用本地存储的数据作为后备 loadLocalTeamData(); } } // 加载各层级成员数据 async function loadTeamLevels(userId) { teamData.levels = []; for (let level = 1; level",
        "__level_count__": "${level.count}人",
        "_______member_earnings": "收益: ${(member.earnings || 0).toFixed(2)} USDT | 加入: ${new Date(member.joinDate).toLocaleDateString()}",
        "___join____": "`).join(''); container.innerHTML = html; } function toggleLevel(level) { const content = document.getElementById(`level-${level}`); content.classList.toggle('active'); } function likeMember(memberId) { // 在本地数据中更新点赞状态 for (let level of teamData.levels) { const member = level.members.find(m => m.id === memberId); if (member) { if (!member.liked) { member.likes++; member.liked = true; } else { member.likes--; member.liked = false; } // 保存到本地存储 localStorage.setItem('teamData', JSON.stringify(teamData)); renderLevels(); // TODO: 可以在这里添加向后端同步点赞状态的API调用 // syncLikeToServer(memberId, member.liked); break; } } } // 同步点赞状态到服务器（预留接口） async function syncLikeToServer(memberId, liked) { try { const userId = localStorage.getItem('userId') || 'default'; const response = await fetch(`${API_BASE_URL}/team/like`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ userId: userId, memberId: memberId, liked: liked }) }); if (!response.ok) { console.error('同步点赞状态失败'); } } catch (error) { console.error('同步点赞状态错误:', error); } } function copyInviteLink() { const link = teamData.inviteLink; if (navigator.clipboard) { navigator.clipboard.writeText(link).then(() => { alert('邀请链接已复制到剪贴板！'); }).catch(() => { fallbackCopy(link); }); } else { fallbackCopy(link); } } function fallbackCopy(text) { const textArea = document.createElement('textarea'); textArea.value = text; document.body.appendChild(textArea); textArea.select(); try { document.execCommand('copy'); alert('邀请链接已复制到剪贴板！'); } catch (err) { alert('复制失败，请手动复制链接'); } document.body.removeChild(textArea); } window.onload = () => { loadTeamData(); };",
        "function_loadmember__": "function loadMember() { const params = new URLSearchParams(window.location.search); const name = params.get('name') || '未知成员'; document.getElementById('name').textContent = name; // 其他指标可根据实际情况从后端或 localStorage 获取，这里示例随机数 document.getElementById('direct').textContent = Math.floor(Math.random()*10); document.getElementById('team').textContent = Math.floor(Math.random()*100); document.getElementById('earn').textContent = '10.00 USDT'; // 固定收益10USDT const levels = ['普通','达人','大神一级','大神二级','大神三级','大神四级','大神五级','大神六级']; document.getElementById('level').textContent = levels[Math.floor(Math.random()*levels.length)]; } window.addEventListener('DOMContentLoaded', loadMember);",
        "let_i18n_": "let i18n; let currentLang = 'zh-CN'; // 初始化国际化系统 async function initI18n() { try { i18n = new I18nEngine(); await i18n.init(); await i18n.setLanguage(currentLang); updateStatus('国际化系统初始化成功', 'success'); updateTime(); setInterval(updateTime, 1000); } catch (error) { updateStatus('初始化失败: ' + error.message, 'error'); console.error('I18n initialization error:', error); } } // 切换语言 async function switchLanguage(lang) { if (!i18n) { updateStatus('国际化系统未初始化', 'error'); return; } try { currentLang = lang; await i18n.setLanguage(lang); updateStatus(`语言已切换到: ${lang}`, 'success'); updateJSText(); updateInterpolationText(); } catch (error) { updateStatus('语言切换失败: ' + error.message, 'error'); console.error('Language switch error:', error); } } // 测试国际化功能 function testI18n() { if (!i18n) { updateStatus('国际化系统未初始化', 'error'); return; } const tests = [ { key: 'ui.title', expected: true }, { key: 'content.welcome', expected: true }, { key: 'nonexistent.key', expected: false } ]; let passed = 0; let total = tests.length; tests.forEach(test => { const result = i18n.t(test.key); const isValid = result !== test.key; // 如果返回原key说明没找到翻译 if (isValid === test.expected) { passed++; } console.log(`Test ${test.key}: ${isValid ? 'PASS' : 'FAIL'} (result: ${result})`); }); updateStatus(`测试完成: ${passed}/${total} 通过`, passed === total ? 'success' : 'error'); } // 更新状态显示 function updateStatus(message, type = '') { const statusEl = document.getElementById('status'); statusEl.textContent = message; statusEl.className = 'status ' + type; } // 更新时间显示 function updateTime() { const timeEl = document.getElementById('current-time'); if (timeEl) { timeEl.textContent = new Date().toLocaleString(); } } // 更新JS文本 function updateJSText() { if (!i18n) return; const jsTextEl = document.getElementById('js-text'); if (jsTextEl) { jsTextEl.textContent = i18n.t('ui.js_updated'); } } // 更新插值文本 function updateInterpolationText() { if (!i18n) return; const interpolationEl = document.getElementById('interpolation-text'); if (interpolationEl) { const userName = currentLang === 'zh-CN' ? '张三' : 'John'; const userAge = 25; interpolationEl.innerHTML = i18n.t('ui.user_info', { name: userName, age: userAge }); } } // 页面加载完成后初始化 document.addEventListener('DOMContentLoaded', initI18n);",
        "__message____resultsdiv_appendchild_resultdiv__": "${message}`; resultsDiv.appendChild(resultDiv); resultsDiv.scrollTop = resultsDiv.scrollHeight; } function testSettingsButton() { addTestResult('开始测试设置按钮功能...', 'info'); const iframe = document.getElementById('testFrame'); const iframeDoc = iframe.contentDocument || iframe.contentWindow.document; try { // 检查设置按钮是否存在 const settingsBtn = iframeDoc.querySelector('.settings-btn'); if (!settingsBtn) { addTestResult('❌ 未找到设置按钮元素', 'error'); return; } addTestResult('✅ 找到设置按钮元素', 'success'); // 检查设置模态框是否存在 const settingsModal = iframeDoc.getElementById('settingsModal'); if (!settingsModal) { addTestResult('❌ 未找到设置模态框元素', 'error'); return; } addTestResult('✅ 找到设置模态框元素', 'success'); // 检查模态框初始状态 const initialDisplay = window.getComputedStyle(settingsModal).display; addTestResult(`📋 模态框初始显示状态: ${initialDisplay}`, 'info'); // 模拟点击设置按钮 settingsBtn.click(); addTestResult('🖱️ 已模拟点击设置按钮', 'info'); // 检查模态框是否显示 setTimeout(() => { const finalDisplay = window.getComputedStyle(settingsModal).display; addTestResult(`📋 点击后模态框显示状态: ${finalDisplay}`, 'info'); if (finalDisplay === 'flex' || finalDisplay === 'block') { addTestResult('🎉 设置按钮功能正常！模态框已成功显示', 'success'); // 测试关闭功能 setTimeout(() => { const closeBtn = settingsModal.querySelector('.modal-close'); if (closeBtn) { closeBtn.click(); addTestResult('🔄 已测试关闭按钮', 'info'); setTimeout(() => { const closedDisplay = window.getComputedStyle(settingsModal).display; if (closedDisplay === 'none') { addTestResult('✅ 关闭功能正常', 'success'); } else { addTestResult('⚠️ 关闭功能可能有问题', 'error'); } }, 100); } }, 1000); } else { addTestResult('❌ 设置按钮点击后模态框未显示', 'error'); } }, 100); } catch (error) { addTestResult(`❌ 测试过程中发生错误: ${error.message}`, 'error'); } } function reloadIframe() { const iframe = document.getElementById('testFrame'); iframe.src = iframe.src; addTestResult('🔄 页面已重新加载', 'info'); } // 页面加载完成后自动运行测试 window.addEventListener('load', () => { setTimeout(() => { addTestResult('🚀 测试页面已加载完成', 'success'); addTestResult('💡 点击\"测试设置按钮\"开始测试', 'info'); }, 1000); });",
        "websocket____": "WebSocket快速测试",
        "__websocket": "连接WebSocket",
        "__ping": "发送Ping",
        "___logel_scrolltop": "`; logEl.scrollTop = logEl.scrollHeight; } function updateStatus(connected) { if (connected) { statusEl.textContent = '状态: 已连接'; statusEl.className = 'status connected'; } else { statusEl.textContent = '状态: 未连接'; statusEl.className = 'status disconnected'; } } function connect() { const token = tokenInput.value.trim(); if (!token) { log('❌ 请输入JWT Token'); return; } try { const wsUrl = `ws://localhost:3000/ws?token=${encodeURIComponent(token)}`; log(`🔄 正在连接到: ${wsUrl}`); websocket = new WebSocket(wsUrl); websocket.onopen = function(event) { log('✅ WebSocket连接已建立'); updateStatus(true); }; websocket.onmessage = function(event) { log(`📨 收到消息: ${event.data}`); }; websocket.onclose = function(event) { log(`🔌 连接已关闭 (代码: ${event.code}, 原因: ${event.reason})`); updateStatus(false); }; websocket.onerror = function(error) { log(`❌ WebSocket错误: ${error}`); updateStatus(false); }; } catch (error) { log(`❌ 连接失败: ${error.message}`); } } function disconnect() { if (websocket) { websocket.close(); websocket = null; log('🔌 主动断开连接'); updateStatus(false); } } function sendPing() { if (websocket && websocket.readyState === WebSocket.OPEN) { const message = JSON.stringify({ type: 'ping' }); websocket.send(message); log(`📤 发送: ${message}`); } else { log('❌ WebSocket未连接'); } } function sendAuth() { if (websocket && websocket.readyState === WebSocket.OPEN) { const message = JSON.stringify({ type: 'auth', email: 'test@example.com' }); websocket.send(message); log(`📤 发送: ${message}`); } else { log('❌ WebSocket未连接'); } } function sendCustomMessage() { if (websocket && websocket.readyState === WebSocket.OPEN) { const message = JSON.stringify({ type: 'test', data: 'Hello WebSocket!' }); websocket.send(message); log(`📤 发送: ${message}`); } else { log('❌ WebSocket未连接'); } } function clearLog() { logEl.innerHTML = ''; } // 页面加载时尝试从localStorage获取token window.onload = function() { const savedToken = localStorage.getItem('token'); if (savedToken) { tokenInput.value = savedToken; log('📋 从localStorage加载了token'); } };",
        "1________": "1. 本地存储测试",
        "2__bug________": "2. Bug报告数据结构测试",
        "__bug____": "测试Bug报告结构",
        "3__________": "3. 消息系统集成测试",
        "4_________": "4. 功能完整性检查",
        "5_________": "5. 打开主页面测试",
        "function_testlocalstorage__": "function testLocalStorage() { const statusDiv = document.getElementById('localStorage-status'); try { // 测试基本的localStorage功能 const testData = { test: 'data', timestamp: Date.now() }; localStorage.setItem('test_message_features', JSON.stringify(testData)); const retrieved = JSON.parse(localStorage.getItem('test_message_features')); if (retrieved && retrieved.test === 'data') { statusDiv.className = 'status success'; statusDiv.innerHTML = '✅ 本地存储功能正常'; } else { throw new Error('数据检索失败'); } // 清理测试数据 localStorage.removeItem('test_message_features'); } catch (error) { statusDiv.className = 'status error'; statusDiv.innerHTML = `❌ 本地存储测试失败: ${error.message}`; } } function testBugReportStructure() { const statusDiv = document.getElementById('bugStructure-status'); try { // 模拟Bug报告数据结构 const bugReport = { id: `bug_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`, title: '测试Bug报告', description: '这是一个测试用的Bug报告描述', type: '功能问题', time: new Date().toISOString(), status: '已提交' }; // 验证必要字段 const requiredFields = ['id', 'title', 'description', 'type', 'time', 'status']; const missingFields = requiredFields.filter(field => !bugReport[field]); if (missingFields.length === 0) { statusDiv.className = 'status success'; statusDiv.innerHTML = `✅ Bug报告数据结构正确",
        "__id____bugreport_id___": "示例ID: ${bugReport.id}`; } else { throw new Error(`缺少必要字段: ${missingFields.join(', ')}`); } } catch (error) { statusDiv.className = 'status error'; statusDiv.innerHTML = `❌ Bug报告结构测试失败: ${error.message}`; } } function testMessageIntegration() { const statusDiv = document.getElementById('messageIntegration-status'); try { // 检查是否存在消息相关的localStorage数据 const messages = localStorage.getItem('messages'); const messageReadStatus = localStorage.getItem('messageReadStatus'); const bugReports = localStorage.getItem('bugReports'); let results = []; if (messages) { results.push('✅ 消息数据存在'); } else { results.push('⚠️ 消息数据不存在（可能是首次访问）'); } if (messageReadStatus) { results.push('✅ 消息已读状态数据存在'); } else { results.push('⚠️ 消息已读状态数据不存在'); } if (bugReports) { results.push('✅ Bug报告数据存在'); } else { results.push('⚠️ Bug报告数据不存在（可能是首次访问）'); } statusDiv.className = 'status info'; statusDiv.innerHTML = results.join('",
        "__7______": "裂金7日 主题演示",
        "__5________": "体验5种不同的视觉风格",
        "_____________________________________": "，展示了当前选择主题的视觉效果。 您可以通过右上角的主题切换器来体验不同的风格。",
        "function_switchtotheme_theme_": "function switchToTheme(theme) { if (window.themeSwitcher) { window.themeSwitcher.switchTheme(theme); } } // 监听主题切换事件 window.addEventListener('themeChanged', (event) => { console.log('主题已切换到:', event.detail.theme); });",
        "function_rendertransaction__": "function renderTransaction() { // 获取查询参数 index const params = new URLSearchParams(window.location.search); const idxStr = params.get('index'); const idx = idxStr ? parseInt(idxStr, 10) : NaN; let txs = []; try { const stored = localStorage.getItem('transactions'); if (stored) txs = JSON.parse(stored); } catch (e) {} const container = document.getElementById('txnRows'); container.innerHTML = ''; if (!isNaN(idx) && idx >= 0 && idx",
        "state": "状态",
        "amount": "金额",
        "__id": "交易ID",
        "time": "时间",
        "_______________________": "请输入您的邮箱地址，我们将重新发送验证邮件给您。",
        "confirm": "确认",
        "function_loadwallet__": "function loadWallet() { // 从appState加载余额 const appState = JSON.parse(localStorage.getItem('appState') || '{}'); const bal = appState.walletBalance || 0; document.querySelector('.balance').innerText = bal.toFixed(2) + ' USDT'; // 加载钱包地址 const walletAddress = localStorage.getItem('walletAddress'); const addressEl = document.getElementById('currentAddress'); if (walletAddress) { addressEl.innerText = walletAddress.substring(0, 10) + '...' + walletAddress.substring(walletAddress.length - 6); addressEl.style.color = 'var(--text)'; } else { addressEl.innerText = '未绑定钱包地址'; addressEl.style.color = 'var(--muted)'; } // 加载交易记录 let tx = []; try { const stored = localStorage.getItem('transactions'); if (stored) tx = JSON.parse(stored); } catch (e) { console.warn('无法解析交易记录', e); } const listEl = document.querySelector('.transaction-list'); listEl.innerHTML = ''; if (tx.length === 0) { listEl.innerHTML = '",
        "balance___": "balance) { alert('提现金额不能超过当前余额'); return; } if (!confirm(`确认提现 ${withdrawAmount} USDT 到地址 ${walletAddress}？\\n手续费：${(withdrawAmount * 0.07).toFixed(2)} USDT`)) { return; } try { const userId = localStorage.getItem('userId') || 'default'; const response = await fetch(`${API_BASE_URL}/api/wallet/withdraw`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ userId: userId, amount: withdrawAmount, walletAddress: walletAddress }) }); const result = await response.json(); if (result.success) { alert(`提现申请已提交！\\n提现金额：${result.data.withdrawAmount} USDT\\n手续费：${result.data.totalFee} USDT\\n剩余余额：${result.data.remainingBalance} USDT`); loadWalletData(); // 重新加载钱包数据 loadTransactions(); // 重新加载交易记录 } else { alert('提现失败：' + result.message); } } catch (error) { console.error('提现错误:', error); alert('提现失败，请稍后重试'); } } // API配置 const API_BASE_URL = 'http://localhost:3000'; // 页面初始化 document.addEventListener('DOMContentLoaded', function() { loadWalletData(); loadTransactions(); }); // 加载钱包数据 async function loadWalletData() { try { const userId = localStorage.getItem('userId') || 'default'; const response = await fetch(`${API_BASE_URL}/api/wallet/balance?userId=${userId}`); const result = await response.json(); if (result.success) { // 更新余额显示 document.querySelector('.balance').textContent = result.data.balance.toFixed(2) + ' USDT'; // 更新钱包地址状态 const addressEl = document.getElementById('currentAddress'); if (result.data.walletAddress) { addressEl.innerText = result.data.walletAddress.substring(0, 10) + '...' + result.data.walletAddress.substring(result.data.walletAddress.length - 6); addressEl.style.color = 'var(--text)'; } else { addressEl.innerText = '未绑定钱包地址'; addressEl.style.color = 'var(--muted)'; } // 保存钱包地址到本地存储 if (result.data.walletAddress) { localStorage.setItem('walletAddress', result.data.walletAddress); } } else { console.error('获取钱包数据失败:', result.message); } } catch (error) { console.error('加载钱包数据错误:', error); } } // 加载交易记录 async function loadTransactions() { try { const userId = localStorage.getItem('userId') || 'default'; const response = await fetch(`${API_BASE_URL}/api/wallet/transactions?userId=${userId}&limit=10`); const result = await response.json(); if (result.success) { // 更新本地存储的交易记录 localStorage.setItem('transactions', JSON.stringify(result.data.transactions)); loadWallet(); } else { console.error('获取交易记录失败:', result.message); } } catch (error) { console.error('加载交易记录错误:', error); // 如果API调用失败，使用本地存储的数据 loadWallet(); } } window.addEventListener('DOMContentLoaded', loadWallet); // 地址绑定相关函数 function showAddressBinding() { const modal = document.getElementById('addressModal'); const input = document.getElementById('addressInput'); const currentAddress = localStorage.getItem('walletAddress'); input.value = currentAddress || ''; modal.style.display = 'flex'; input.focus(); } function hideAddressBinding() { const modal = document.getElementById('addressModal'); modal.style.display = 'none'; } async function saveWalletAddress() { const input = document.getElementById('addressInput'); const address = input.value.trim(); if (!address) { alert('请输入钱包地址'); return; } // 简单验证USDT TRC20地址格式（以T开头，34位字符） if (!address.startsWith('T') || address.length !== 34) { alert('请输入有效的USDT TRC20钱包地址'); return; } try { const userId = localStorage.getItem('userId') || 'default'; const response = await fetch(`${API_BASE_URL}/api/wallet/bind-address`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ userId: userId, walletAddress: address }) }); const result = await response.json(); if (result.success) { alert('钱包地址绑定成功！'); hideAddressBinding(); loadWalletData(); // 重新加载钱包数据 } else { alert('绑定失败：' + result.message); } } catch (error) { console.error('绑定钱包地址错误:', error); alert('绑定失败，请稍后重试'); } } // 点击模态框背景关闭 document.getElementById('addressModal').addEventListener('click', function(e) { if (e.target === this) { hideAddressBinding(); } });",
        "amount__usdt_": "金额 (USDT)",
        "all": "全部",
        "usdt____": "USDT钱包地址",
        "_______5__": "比例手续费 (5%)",
        "let_currentbalance": "let currentBalance = 0; let feeRate = 0.05; function loadWithdrawPage() { // 从appState加载余额 const appState = JSON.parse(localStorage.getItem('appState') || '{}'); currentBalance = appState.walletBalance || 0; feeRate = appState.withdrawFeeRate || 0.05; document.getElementById('currentBalance').innerText = currentBalance.toFixed(2) + ' USDT'; // 更新手续费标签和答题按钮 updateFeeRateLabel(); // 检查并加载绑定的地址 loadBoundAddress(); // 监听输入变化 const amountInput = document.getElementById('withdrawAmount'); const addressInput = document.getElementById('walletAddress'); amountInput.addEventListener('input', updateFeeCalculation); addressInput.addEventListener('input', validateForm); // 绑定地址相关事件 document.getElementById('changeAddressBtn').addEventListener('click', enableAddressEdit); updateFeeCalculation(); } function updateFeeRateLabel() { const feeRateLabel = document.getElementById('feeRateLabel'); const feeRatePercent = (feeRate * 100).toFixed(0); // 获取答题进度 const correctCount = parseInt(localStorage.getItem('quizCorrect')) || 0; // 根据答题进度显示不同的文案 let progressText = ''; if (correctCount === 0) { progressText = '未开始答题'; } else if (feeRate",
        "currentbalance___": "currentBalance) { amountInput.classList.add('error'); amountError.innerText = `余额不足，需要${totalDeduct.toFixed(2)} USDT（含手续费）`; amountError.style.display = 'block'; isValid = false; } // 验证地址 const address = addressInput.value.trim(); addressInput.classList.remove('error'); addressError.style.display = 'none'; if (address.length",
        "__proceedwithwithdraw_amount_": "{ proceedWithWithdraw(amount, address); }); } else { // 使用已绑定地址，直接提现 proceedWithWithdraw(amount, address); } } function showAddressConfirmation(address, amount, callback) { // 使用自定义对话框替代confirm const modal = document.getElementById('addressConfirmModal'); const addressText = document.getElementById('confirmAddressText'); // 设置地址文本 addressText.textContent = address; // 显示对话框 modal.style.display = 'flex'; // 存储回调函数和地址信息 window.currentAddressConfirm = { address: address, amount: amount, callback: callback }; } function closeAddressConfirmModal() { const modal = document.getElementById('addressConfirmModal'); modal.style.display = 'none'; window.currentAddressConfirm = null; } function confirmAddress() { const modal = document.getElementById('addressConfirmModal'); modal.style.display = 'none'; if (window.currentAddressConfirm) { // 显示绑定询问对话框 showBindAddressModal(); } } function showBindAddressModal() { const modal = document.getElementById('bindAddressModal'); modal.style.display = 'flex'; } function skipBinding() { const modal = document.getElementById('bindAddressModal'); modal.style.display = 'none'; if (window.currentAddressConfirm) { window.currentAddressConfirm.callback(); window.currentAddressConfirm = null; } } function confirmBinding() { const modal = document.getElementById('bindAddressModal'); modal.style.display = 'none'; if (window.currentAddressConfirm) { // 绑定地址 localStorage.setItem('boundWalletAddress', window.currentAddressConfirm.address); // 刷新地址显示状态 loadBoundAddress(); // 执行回调 window.currentAddressConfirm.callback(); window.currentAddressConfirm = null; } } function proceedWithWithdraw(amount, address) { const fixedFee = 2; const percentFee = amount * feeRate; const totalFee = fixedFee + percentFee; const totalDeduct = amount + totalFee; // 最终确认 const confirmed = confirm(`确认提现？\\n\\n提现金额：${amount.toFixed(2)} USDT\\n手续费：${totalFee.toFixed(2)} USDT\\n实际扣除：${totalDeduct.toFixed(2)} USDT\\n提现地址：${address.substring(0, 10)}...\\n\\n预计24小时内到账`); if (!confirmed) return; // 执行提现 const appState = JSON.parse(localStorage.getItem('appState') || '{}'); const newBalance = currentBalance - totalDeduct; appState.walletBalance = newBalance; localStorage.setItem('appState', JSON.stringify(appState)); // 生成交易ID const transactionId = 'tx_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9); // 添加交易记录（初始状态为正在提现） let transactions = []; try { const stored = localStorage.getItem('transactions'); if (stored) transactions = JSON.parse(stored); } catch (e) {} const transaction = { id: transactionId, type: 'withdraw', amount: -totalDeduct, description: `提现${amount.toFixed(2)} USDT`, timestamp: new Date().toISOString(), address: address, actualAmount: amount, fee: totalFee, status: 'processing', statusText: '正在提现' }; transactions.push(transaction); localStorage.setItem('transactions', JSON.stringify(transactions)); // 模拟提现流程状态变化 setTimeout(() => { updateWithdrawStatus(transactionId, 'confirming', '等待链上确认'); }, 3000); // 3秒后变为等待确认 setTimeout(() => { updateWithdrawStatus(transactionId, 'completed', '提现成功'); }, 15000); // 15秒后变为提现成功 alert(`提现申请已提交！\\n\\n提现金额：${amount.toFixed(2)} USDT\\n手续费：${totalFee.toFixed(2)} USDT\\n剩余余额：${newBalance.toFixed(2)} USDT\\n\\n交易ID：${transactionId}`); // 返回钱包页面 history.back(); } function updateWithdrawStatus(transactionId, status, statusText) { let transactions = []; try { const stored = localStorage.getItem('transactions'); if (stored) transactions = JSON.parse(stored); } catch (e) {} const transactionIndex = transactions.findIndex(tx => tx.id === transactionId); if (transactionIndex !== -1) { transactions[transactionIndex].status = status; transactions[transactionIndex].statusText = statusText; localStorage.setItem('transactions', JSON.stringify(transactions)); // 如果当前在钱包页面，触发刷新 if (window.location.pathname.includes('wallet.html')) { if (typeof loadTransactions === 'function') { loadTransactions(); } } } } function loadBoundAddress() { const boundAddress = localStorage.getItem('boundWalletAddress'); const addressInput = document.getElementById('walletAddress'); const bindingStatus = document.getElementById('addressBindingStatus'); const boundAddressDisplay = document.getElementById('boundAddressDisplay'); if (boundAddress) { // 显示已绑定地址 addressInput.value = boundAddress; addressInput.disabled = true; bindingStatus.style.display = 'block'; boundAddressDisplay.textContent = boundAddress; } else { // 没有绑定地址 bindingStatus.style.display = 'none'; addressInput.disabled = false; } validateForm(); } function enableAddressEdit() { const addressInput = document.getElementById('walletAddress'); const bindingStatus = document.getElementById('addressBindingStatus'); if (confirm('确定要修改收款地址吗？\\n\\n修改后需要重新确认新地址。')) { addressInput.disabled = false; addressInput.value = ''; addressInput.focus(); bindingStatus.style.display = 'none'; validateForm(); } } window.addEventListener('DOMContentLoaded', loadWithdrawPage);"
    },
    "titles": {},
    "placeholders": {
        "_________": "请输入您的邮箱地址",
        "__________": "请输入题目内容...",
        "__________________": "请详细描述问题的具体情况、复现步骤等",
        "_______": "请输入邮箱地址",
        "_____": "请输入密码",
        "________6_": "请设置密码（至少6位）",
        "______": "请输入邀请码",
        "____________": "🔍 搜索题目内容...",
        "option_a": "选项 A",
        "option_b": "选项 B",
        "option_c": "选项 C",
        "option_d": "选项 D",
        "_____________": "答错时显示的提示信息（可选）",
        "_________6_": "请输入新密码（至少6位）",
        "________": "请再次输入新密码",
        "__jwt_token": "输入JWT Token",
        "___usdt_____trc20": "请输入USDT钱包地址（TRC20）",
        "__20_usdt": "最低20 USDT",
        "___usdt____": "请输入USDT钱包地址"
    },
    "alts": {
        "message": "消息",
        "__7_": "裂金7日"
    },
    "labels": {},
    "messages": {
        "__redis____": "✅ Redis连接成功",
        "__redis_____": "❌ Redis连接错误:",
        "__mysql____": "✅ MySQL连接成功",
        "__redis______": "✅ Redis连接测试成功",
        "__________": "开始更新语言包...",
        "_____________": "处理已确认交易时发生错误:",
        "________": "英文语言包已更新",
        "_____": "简洁清新风",
        "_________": "国际化初始化失败:",
        "__id_________": "用户ID和任务名称不能为空",
        "_______": "语言包更新完成！",
        "______": "了解更多信息",
        "____": "问题类型",
        "_______168________": "账号激活成功！168小时挑战期已开始，请完成任务获得收益。",
        "token____": "Token刷新成功",
        "__token___": "刷新token错误:",
        "__token__": "刷新token失败",
        "____________________": "邮箱验证成功，您现在可以正常使用所有功能",
        "_________________": "数据库不可用，使用内存存储钱包地址",
        "___________": "❌ 清理测试数据失败:",
        "___________________": "数据库不可用，使用内存存储标记钱包地址",
        "______6___": "密码至少需要6位字符",
        "_______________": "开始清理错误的国际化标记...",
        "____________": "✅ 空结构交易金额正确: 60 USDT",
        "__001": "用户001",
        "___": "; } else { // 页面显示时恢复动画 logo.style.animationPlayState =",
        "____3_______": "只有状态3的用户才能复购",
        "_______1_2_3": "目标状态必须是1、2或3",
        "__1__________": "邀请1位好友注册并激活账号",
        "______1_": "帮助下级推荐1人",
        "__________1____": "指导你的下级成功邀请1位新用户",
        "____________1_": "教下级如何教他的下级推荐1人",
        "________________": "邮件服务未配置，跳过发送验证邮件",
        "__20___________80_": "完成20道基础题目，正确率达到80%",
        "________2_": "大神任务一：直推2人 × 2层 = 6人",
        "__2________2_": "建立2层团队结构，每层2人",
        "________3_": "大神任务二：直推3人 × 3层 = 39人",
        "__3________3_": "建立3层团队结构，每层3人",
        "________4_": "大神任务三：直推4人 × 4层 = 340人",
        "__4________4_": "建立4层团队结构，每层4人",
        "________5_": "大神任务四：直推5人 × 5层 = 3905人",
        "__5________5_": "建立5层团队结构，每层5人",
        "________6_": "大神任务五：直推6人 × 6层 = 55986人",
        "__6________6_": "建立6层团队结构，每层6人",
        "________7_": "大神任务六：直推7人 × 7层 = 960799人",
        "__7________7_": "建立7层团队结构，每层7人",
        "a__________": "A. 通过社交媒体分享",
        "b________": "B. 提供优质服务",
        "c______": "C. 诚信推荐",
        "d______": "D. 以上都是",
        "__id_______": "问题ID和答案不能为空",
        "__id____": "用户ID不能为空",
        "_____80_______": "正确率不足80%，请重新答题",
        "___class": "); class WalletUtils { // 生成TRC20钱包地址（使用TRC20服务） static async generateWalletAddress(userId, type =",
        "__002": "用户002",
        "__003": "用户003",
        "__status_": ", status: 2 }] ]); // 团队结构数据 this.teamStructure = {",
        "__004": "用户004",
        "__005": "用户005",
        "______id________": "邀请码、用户ID和用户名不能为空",
        "______usdt_trc20____": "请输入有效的USDT TRC20钱包地址",
        "________20_usdt": "提现金额不能少于20 USDT",
        "failure": "失败",
        "__________________": "开始修复国际化函数调用时机问题...",
        "withdraw": "提现",
        "___5________": "请等待5分钟后再重新发送",
        "_____________________": "数据库不可用，使用内存存储查找用户钱包地址",
        "_____1_4_____": "状态必须是1-4之间的整数",
        "__websocket_____": "发送WebSocket消息失败:",
        "1_____2____": "1:未激活 2:已激活 3:倒计时结束未复购",
        "___1_7": "层级 1-7",
        "null______": "NULL表示系统通知",
        "_____usdt_": "激活金额(USDT)",
        "________usdt_": "固定提现手续费(USDT)",
        "_______usdt_": "每日提现限额(USDT)",
        "______________": "已添加安全的国际化函数包装器",
        "____mysql__": "✅ 连接MySQL成功",
        "_n__________": "\\n📋 测试账号信息:",
        "____admin_gold7_com": "邮箱: admin@gold7.com",
        "____admin123": "密码: admin123",
        "_____admin1": "邀请码: ADMIN1",
        "___http______": "🔒 HTTP服务器已关闭",
        "______promise___": "❌ 未处理的Promise拒绝:",
        "_______ethereal_______": "🔄 尝试创建Ethereal测试账号...",
        "__ethereal________": "✅ Ethereal测试账号创建成功",
        "____ethereal_______": "❌ 创建Ethereal测试账号失败:",
        "___title___________title_": "> <title>验证您的邮箱地址</title> <style> body { font-family: -apple-system, BlinkMacSystemFont,",
        "___________h1____div_": ">验证您的邮箱地址</h1> </div> <div class=",
        "____p_": "}！</p> <p>我们收到了您的密码重置请求。点击下方按钮设置新密码：</p> <div style=",
        "_________a____div_": ">验证邮箱地址</a> </div> <p>如果按钮无法点击，请复制以下链接到浏览器地址栏：</p> <p style=",
        "___strong___": "> <strong>🔒 安全提醒：</strong> <ul> <li>此重置链接将在1小时后失效</li> <li>如果您没有请求重置密码，请忽略此邮件</li> <li>为了账户安全，请设置强密码</li> <li>请勿将此链接分享给他人</li> </ul> </div> </div> <div class=",
        "___p___________": "> <p>此邮件由系统自动发送，请勿回复。</p> <p>如有疑问，请联系客服支持。</p> <p>&copy; 2024 Gold7 Game. All rights reserved.</p> </div> </div> </body> </html>",
        "___title_________title_": "> <title>重置您的密码</title> <style> body { font-family: -apple-system, BlinkMacSystemFont,",
        "_________h1____div_": ">重置您的密码</h1> </div> <div class=",
        "_______a____div_": ">重置密码</a> </div> <p>如果按钮无法点击，请复制以下链接到浏览器地址栏：</p> <p style=",
        "___usdt_": "金额(USDT)",
        "____id": "相关用户ID",
        "description": "描述",
        "trc20service_______": "TRC20Service 初始化失败:",
        "___websocket______": "🔌 WebSocket服务器已启动",
        "__websocket______": "❌ WebSocket连接被拒绝: token无效",
        "trc20_______": "TRC20服务初始化完成",
        "_____id_": "新激活用户ID:",
        "_n________2": "\\n=== 测试场景2：只有3层上级链条 ===",
        "_n________3": "\\n=== 测试场景3：没有上级（孤立用户） ===",
        "____id_": "孤立用户ID:",
        "_n________4": "\\n=== 测试场景4：验证余额更新 ===",
        "_n________5": "\\n=== 测试场景5：验证交易记录 ===",
        "________________n": "🚀 开始空结构功能测试...\\n",
        "_n_____________": "\\n=== 测试空结构报告服务 ===",
        "_n_________": "\\n🎉 所有测试完成！",
        "_n____________": "\\n🧹 清理测试数据...",
        "______span________g_": ">任务<\\/span>感 \\*\\//g, replace:",
        "______span___________g_": ">任务<\\/span>列表样式 \\*\\//g, replace:",
        "________span___________g_": ">再次激活<\\/span>突出样式 \\*\\//g, replace:",
        "______span_________g_": ">提示<\\/span>调整 \\*\\//g, replace:",
        "________span_________g_": ">危险操作<\\/span>区域 \\*\\//g, replace:",
        "______span_______________g_": ">任务<\\/span>完成弹窗特殊样式 \\*\\//g, replace:",
        "______span_____________g_": ">任务<\\/span>相关字体优化 \\*\\//g, replace:",
        "___2___span__________________g_": ">状态2<\\/span>倒计时区域特殊字体优化 \\*\\//g, replace:",
        "______span______9px___12px______g_": ">小时<\\/span>挑战标签从9px增加到12px \\*\\//g, replace:",
        "_____span___10px___13px______g_": ">天<\\/span>数从10px增加到13px \\*\\//g, replace:",
        "________span_____________g_": ">邀请链接<\\/span>区域字体优化 \\*\\//g, replace:",
        "________span_": ">时间已设置</span>",
        "________span____12px___15px______g_": ">邀请链接<\\/span>标题从12px增加到15px \\*\\//g, replace:",
        "______span__________g_": ">提示<\\/span>小红点 \\*\\//g, replace:",
        "________span______g_": ">功能设置<\\/span> -->/g, replace:",
        "_________span______g_": ">帮助与支持<\\/span> -->/g, replace:",
        "________span________g_": ">测试功能<\\/span>区域 -->/g, replace:",
        "________span____span__g__replace_": ">消息通知<\\/span><\\/span>/g, replace:",
        "_______span_": ">网络错误</span>",
        "______span____span__g__replace_": ">音效<\\/span><\\/span>/g, replace:",
        "________span_data_i18n_": ">选择界面显示<span data-i18n=",
        "___________span_": ">开启操作音效反馈</span>",
        "__________span_": ">随机公告已发送</span>",
        "______span_data_i18n_": ">开启操作<span data-i18n=",
        "______span______span__g__replace_": ">音效<\\/span>反馈<\\/span>/g, replace:",
        "_____span_": ">语言</span>",
        "task": "任务",
        "__": "替换",
        "save": "保存",
        "deletion": "删除",
        "edit": "编辑",
        "copy": "复制",
        "share": "分享",
        "refresh": "刷新",
        "______span_": ">排行榜</span>",
        "cancel": "取消",
        "team": "团队",
        "grab": "抢红包",
        "wallet": "钱包",
        "ranking": "排行榜",
        "___1__span_": ">状态1</span>",
        "__1": "状态1",
        "___2__span_": ">状态2</span>",
        "__2": "状态2",
        "___3__span_": ">状态3</span>",
        "__3": "状态3",
        "_________span_": ">倒计时已重置</span>",
        "_168________span_": ">168小时倒计时中</span>",
        "168______": "168小时倒计时中",
        "____span_": ">秒</span>",
        "_": "天",
        "hour": "小时",
        "minute": "分钟",
        "second": "秒",
        "javascript______": "JavaScript代码修复完成！",
        "____t_________": "开始修复t()函数调用...",
        "________t______": "未找到需要修复的t()函数调用",
        "_____token_____websocket": "未找到认证token，无法连接WebSocket",
        "websocket_____": "WebSocket连接已建立",
        "__websocket___": "收到WebSocket消息:",
        "websocket______": "WebSocket连接已关闭:",
        "_____mp3": "金币声效.mp3",
        "html_________": "HTML文件国际化替换完成！",
        "_____span____button_": ">风格</span> </button> <div class=",
        "bug__": "Bug标题"
    },
    "templates": {}
};

// 导出配置
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TEXTS_CONFIG;
} else if (typeof window !== 'undefined') {
    window.TEXTS = TEXTS_CONFIG;
}